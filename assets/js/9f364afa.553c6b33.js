"use strict";(self.webpackChunkpcoin_website=self.webpackChunkpcoin_website||[]).push([[8834],{4137:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),s=p(n),m=r,k=s["".concat(d,".").concat(m)]||s[m]||c[m]||l;return n?a.createElement(k,i(i({ref:t},u),{},{components:n})):a.createElement(k,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},7471:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return d},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return c}});var a=n(3117),r=n(102),l=(n(7294),n(4137)),i=["components"],o={title:"Depend",sidebar_position:6},d=void 0,p={unversionedId:"Pcoin-Core/Building/depends",id:"Pcoin-Core/Building/depends",title:"Depend",description:"To build dependencies for the current arch+OS:",source:"@site/docs/Pcoin-Core/Building/depends.md",sourceDirName:"Pcoin-Core/Building",slug:"/Pcoin-Core/Building/depends",permalink:"/docs/Pcoin-Core/Building/depends",draft:!1,editUrl:"https://github.com/pcoinproject/pcoin.dev/edit/master/docs/Pcoin-Core/Building/depends.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Depend",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Dependencies",permalink:"/docs/Pcoin-Core/Building/dependencies"},next:{title:"Developer Notes",permalink:"/docs/Pcoin-Core/Development/developer-notes"}},u={},c=[{value:"Install the required dependencies",id:"install-the-required-dependencies",level:2},{value:"For macOS cross compilation",id:"for-macos-cross-compilation",level:3},{value:"For Win64 cross compilation",id:"for-win64-cross-compilation",level:3},{value:"For linux (including i386, ARM) cross compilation",id:"for-linux-including-i386-arm-cross-compilation",level:3},{value:"Dependency Options",id:"dependency-options",level:3},{value:"Additional targets",id:"additional-targets",level:3}],s={toc:c};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"To build dependencies for the current arch+OS:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"make\n")),(0,l.kt)("p",null,"To build for another arch/OS:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"make HOST=host-platform-triplet\n")),(0,l.kt)("p",null,"For example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"make HOST=x86_64-w64-mingw32 -j4\n")),(0,l.kt)("p",null,"A prefix will be generated that's suitable for plugging into Pcoin's\nconfigure. In the above example, a dir named x86_64-w64-mingw32 will be\ncreated. To use it for Pcoin:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"./configure --prefix=`pwd`/depends/x86_64-w64-mingw32\n")),(0,l.kt)("p",null,"Common ",(0,l.kt)("inlineCode",{parentName:"p"},"host-platform-triplets")," for cross compilation are:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Platform"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"x86_64-w64-mingw32")),(0,l.kt)("td",{parentName:"tr",align:null},"for Win64")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"x86_64-apple-darwin16")),(0,l.kt)("td",{parentName:"tr",align:null},"for macOS")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"arm-linux-gnueabihf")),(0,l.kt)("td",{parentName:"tr",align:null},"for Linux ARM 32 bit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"aarch64-linux-gnu")),(0,l.kt)("td",{parentName:"tr",align:null},"for Linux ARM 64 bit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"riscv32-linux-gnu")),(0,l.kt)("td",{parentName:"tr",align:null},"for Linux RISC-V 32 bit")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"riscv64-linux-gnu")),(0,l.kt)("td",{parentName:"tr",align:null},"for Linux RISC-V 64 bitfor Linux RISC-V 64 bit")))),(0,l.kt)("p",null,"No other options are needed, the paths are automatically configured."),(0,l.kt)("h2",{id:"install-the-required-dependencies"},"Install the required dependencies"),(0,l.kt)("h3",{id:"for-macos-cross-compilation"},"For macOS cross compilation"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python3-setuptools\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"You must obtain the macOS SDK before proceeding with a cross-compile.\nUnder the depends directory, create a subdirectory named ",(0,l.kt)("inlineCode",{parentName:"p"},"SDKs"),".\nThen, place the extracted SDK under this new directory.\nFor more information, see ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/pcoin/tree/master/contrib/macdeploy#sdk-extraction"},"SDK Extraction"),".")),(0,l.kt)("h3",{id:"for-win64-cross-compilation"},"For Win64 cross compilation"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"see ",(0,l.kt)("a",{parentName:"li",href:"/docs/Pcoin-Core/Building/build-windows#cross-compilation-for-ubuntu-and-windows-subsystem-for-linux"},"build-windows.md"))),(0,l.kt)("h3",{id:"for-linux-including-i386-arm-cross-compilation"},"For linux (including i386, ARM) cross compilation"),(0,l.kt)("p",null,"Common linux dependencies:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt-get install make automake cmake curl g++-multilib libtool binutils-gold bsdmainutils pkg-config python3 patch\n")),(0,l.kt)("p",null,"For linux ARM cross compilation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt-get install g++-arm-linux-gnueabihf binutils-arm-linux-gnueabihf\n")),(0,l.kt)("p",null,"For linux AARCH64 cross compilation:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt-get install g++-aarch64-linux-gnu binutils-aarch64-linux-gnu\n")),(0,l.kt)("p",null,"For linux RISC-V 64-bit cross compilation (there are no packages for 32-bit):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt-get install g++-riscv64-linux-gnu binutils-riscv64-linux-gnu\n")),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"RISC-V known issue: gcc-7.3.0 and gcc-7.3.1 result in a broken ",(0,l.kt)("inlineCode",{parentName:"p"},"test_pcoin")," executable (see ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bitcoin/pull/13543"},"https://github.com/bitcoin/bitcoin/pull/13543"),"),\nthis is apparently fixed in gcc-8.1.0.")),(0,l.kt)("h3",{id:"dependency-options"},"Dependency Options"),(0,l.kt)("p",null,"The following can be set when running make: ",(0,l.kt)("inlineCode",{parentName:"p"},"make FOO=bar")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Options"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SOURCES_PATH"),(0,l.kt)("td",{parentName:"tr",align:null},"downloaded sources will be placed here")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"BASE_CACHE"),(0,l.kt)("td",{parentName:"tr",align:null},"built packages will be placed here")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"SDK_PATH"),(0,l.kt)("td",{parentName:"tr",align:null},"Path where sdk's can be found (used by macOS)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"FALLBACK_DOWNLOAD_PATH"),(0,l.kt)("td",{parentName:"tr",align:null},"If a source file can't be fetched, try here before giving up")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"NO_QT"),(0,l.kt)("td",{parentName:"tr",align:null},"Don't download/build/cache qt and its dependencies")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"NO_ZMQ"),(0,l.kt)("td",{parentName:"tr",align:null},"Don't download/build/cache packages needed for enabling zeromq")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"NO_WALLET"),(0,l.kt)("td",{parentName:"tr",align:null},"Don't download/build/cache libs needed to enable the wallet")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"NO_UPNP"),(0,l.kt)("td",{parentName:"tr",align:null},"Don't download/build/cache packages needed for enabling upnp")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"NO_NATPMP"),(0,l.kt)("td",{parentName:"tr",align:null},"Don't download/build/cache packages needed for enabling NAT-PMP")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"NO_RUST"),(0,l.kt)("td",{parentName:"tr",align:null},"Don't download/build/cache rust packages (including librustzcash)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ALLOW_HOST_PACKAGES"),(0,l.kt)("td",{parentName:"tr",align:null},"Packages that are missed in dependencies (due to ",(0,l.kt)("inlineCode",{parentName:"td"},"NO_*")," option or build script logic) are searched for among the host system packages using ",(0,l.kt)("inlineCode",{parentName:"td"},"pkg-config"),". It allows building with packages of other (newer) versions")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"DEBUG"),(0,l.kt)("td",{parentName:"tr",align:null},"disable some optimizations and enable more runtime checking")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"HOST_ID_SALT"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional salt to use when generating host package ids")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"BUILD_ID_SALT"),(0,l.kt)("td",{parentName:"tr",align:null},"Optional salt to use when generating build package ids")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"FORCE_USE_SYSTEM_CLANG"),(0,l.kt)("td",{parentName:"tr",align:null},"(EXPERTS ONLY) When cross-compiling for macOS, use clang found in the system's ",(0,l.kt)("code",null,"$PATH")," rather than the default prebuilt release of clang from llvm.org")))),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"If some packages are not built, for example ",(0,l.kt)("inlineCode",{parentName:"p"},"make NO_WALLET=1"),", the appropriate\noptions will be passed to bitcoin's configure. In this case, ",(0,l.kt)("inlineCode",{parentName:"p"},"--disable-wallet"),".")),(0,l.kt)("h3",{id:"additional-targets"},"Additional targets"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"download: run 'make download' to fetch all sources without building them\ndownload-osx: run 'make download-osx' to fetch all sources needed for macOS builds\ndownload-win: run 'make download-win' to fetch all sources needed for win builds\ndownload-linux: run 'make download-linux' to fetch all sources needed for linux builds\n")))}m.isMDXComponent=!0}}]);