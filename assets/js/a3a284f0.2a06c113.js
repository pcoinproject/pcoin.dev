"use strict";(self.webpackChunkpcoin_website=self.webpackChunkpcoin_website||[]).push([[6315],{4137:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),c=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=c(e.components);return i.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?i.createElement(h,r(r({ref:t},s),{},{components:n})):i.createElement(h,r({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8731:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var i=n(3117),a=n(102),o=(n(7294),n(4137)),r=["components"],l={title:"Custom Integration",sidebar_position:28},p="Using the PCOINPay API for Custom Integration",c={unversionedId:"PcoinPay/Guide/CustomIntegration",id:"PcoinPay/Guide/CustomIntegration",title:"Custom Integration",description:"PCOINPay Server provides 2 APIs in order to integrate with it:",source:"@site/docs/PcoinPay/Guide/CustomIntegration.md",sourceDirName:"PcoinPay/Guide",slug:"/PcoinPay/Guide/CustomIntegration",permalink:"/docs/PcoinPay/Guide/CustomIntegration",draft:!1,editUrl:"https://github.com/pcoinproject/pcoin.dev/edit/master/docs/PcoinPay/Guide/CustomIntegration.md",tags:[],version:"current",sidebarPosition:28,frontMatter:{title:"Custom Integration",sidebar_position:28},sidebar:"tutorialSidebar",previous:{title:"VirtueMart",permalink:"/docs/PcoinPay/Guide/VirtueMart"},next:{title:"LNbank",permalink:"/docs/PcoinPay/Guide/LNbank/"}},s={},u=[{value:"Official Client Libraries",id:"official-client-libraries",level:2},{value:"Accessing the API Manually",id:"accessing-the-api-manually",level:2},{value:"Pairing process",id:"pairing-process",level:2},{value:"Client side pairing",id:"client-side-pairing",level:3},{value:"Server side pairing",id:"server-side-pairing",level:3},{value:"Note",id:"note",level:2},{value:"Modal Checkout",id:"modal-checkout",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,r);return(0,o.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"using-the-pcoinpay-api-for-custom-integration"},"Using the PCOINPay API for Custom Integration"),(0,o.kt)("p",null,"PCOINPay Server provides 2 APIs in order to integrate with it:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../Development/GreenFieldExample.md"},"GreenField API")," - A RESTful API that aims to allow you to use PCOINPay Server headless. This is the recommended API for projects which do not wish to recycle code from a Bitpay integration."),(0,o.kt)("li",{parentName:"ul"},"Bitpay Invoice API - PCOINPay implements the same API as Bitpay for creating and managing invoices.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Migrating from BitPay to PCOINPay")," normally is as easy as changing a URL."),(0,o.kt)("p",null,"While Bitpay only allows one account for one merchant, PCOINPay allows a user to manage multiple stores."),(0,o.kt)("h2",{id:"official-client-libraries"},"Official Client Libraries"),(0,o.kt)("p",null,"PCOINPay maintains official client libraries for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/NBitpayClient"},"C#"),", ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/pcoinpay-python"},"Python")," and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/node-pcoinpay"},"NodeJS")),(0,o.kt)("h2",{id:"accessing-the-api-manually"},"Accessing the API Manually"),(0,o.kt)("p",null,"If not using one of the libraries above, the REST API can be accessed manually."),(0,o.kt)("p",null,"The authentication mechanism is using ",(0,o.kt)("inlineCode",{parentName:"p"},"BitId"),"."),(0,o.kt)("p",null,"With ",(0,o.kt)("inlineCode",{parentName:"p"},"BitId"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"client")," of the API (like an e-commerce plugin) generates a private key, then informs the ",(0,o.kt)("inlineCode",{parentName:"p"},"server")," (PCOINPay) about the ",(0,o.kt)("inlineCode",{parentName:"p"},"public key"),"."),(0,o.kt)("p",null,"Every requests to the API sent by the client is signed with the client's ",(0,o.kt)("inlineCode",{parentName:"p"},"private key"),"."),(0,o.kt)("p",null,"We call ",(0,o.kt)("inlineCode",{parentName:"p"},"pairing")," the process to inform PCOINPay about your ",(0,o.kt)("inlineCode",{parentName:"p"},"public key"),"."),(0,o.kt)("h2",{id:"pairing-process"},"Pairing process"),(0,o.kt)("p",null,"Your first need to create a new store:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Log in"),(0,o.kt)("li",{parentName:"ol"},"Go to Stores menu"),(0,o.kt)("li",{parentName:"ol"},"Click on ",(0,o.kt)("inlineCode",{parentName:"li"},"Create a new store")),(0,o.kt)("li",{parentName:"ol"},"Enter a friendly name for the store, validate.")),(0,o.kt)("p",null,"There is two method of ",(0,o.kt)("inlineCode",{parentName:"p"},"pairing"),", client side pairing and server side pairing."),(0,o.kt)("h3",{id:"client-side-pairing"},"Client side pairing"),(0,o.kt)("p",null,"With client side pairing, the ",(0,o.kt)("inlineCode",{parentName:"p"},"client")," generates a URL from their ",(0,o.kt)("inlineCode",{parentName:"p"},"public key")," which a human user can browse to validate the pairing."),(0,o.kt)("p",null,"Typically the URL looks like ",(0,o.kt)("inlineCode",{parentName:"p"},"https://pcoinpay.example.com/api-access-request?pairingCode=<pairingcode_goes_here>"),"."),(0,o.kt)("h3",{id:"server-side-pairing"},"Server side pairing"),(0,o.kt)("p",null,"The second way, is to generate your private key via some bitcoin library then:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Go to the store's settings"),(0,o.kt)("li",{parentName:"ol"},"Click on ",(0,o.kt)("inlineCode",{parentName:"li"},"Access tokens")),(0,o.kt)("li",{parentName:"ol"},"Click on ",(0,o.kt)("inlineCode",{parentName:"li"},"Create new Token")),(0,o.kt)("li",{parentName:"ol"},"Select merchant's facade and enter your public key,"),(0,o.kt)("li",{parentName:"ol"},"Click request pairing"),(0,o.kt)("li",{parentName:"ol"},"Click on Approve")),(0,o.kt)("h2",{id:"note"},"Note"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"PCOINPay Server has an API compatible with Bitpay"),"; changing your e-commerce application ",(0,o.kt)("strong",{parentName:"p"},"from Bitpay to PCOINPay")," should take minimal effort."),(0,o.kt)("p",null,"You can read the full API documentation ",(0,o.kt)("a",{parentName:"p",href:"https://bitpay.com/api#resource-Invoices"},"on Bitpay's website"),"."),(0,o.kt)("p",null,"There is only one difference: Bitpay only allows one account for one merchant, PCOINPay allows a user to manage multiple stores."),(0,o.kt)("h2",{id:"modal-checkout"},"Modal Checkout"),(0,o.kt)("p",null,"To generate a pop-up modal experience:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Include the pcoinpay.js script in your html page")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<script src="https://your.pcoinpay.url/modal/pcoinpay.js"><\/script>\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Call the invoice API to generate an invoice (example code). This is sample backend code as it contains an auth token that should not be exposed in your front-end.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const axiosClient = axios.create({\n  baseURL: PCOINPAY_URL,\n  timeout: 5000,\n  responseType: \'json\',\n  headers: {\n    \'Content-Type\': \'application/json\',\n    \'Authorization\': PCOINPAY_AUTH\n  }\n});\n\nconst invoiceCreation = {\n  "price": 12345,\n  "currency": "USD",\n  "orderId": "something",\n  "itemDesc": "item description",\n  "notificationUrl": "https://webhook.after.checkout.com/goeshere",\n  "redirectURL": "https://go.here.after.checkout.com"\n};\n\nconst response = await axiosClient.post("/invoices", invoiceCreation);\nconst invoiceId = response.data.data.id;\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Use the invoiceId to pop up the modal")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"window.pcoinpay.showInvoice(invoiceId)\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"You'll often want to do something like refresh the state of your page when the invoice is paid, or note some kind of state before the modal pops up. You can attach event listeners like this:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"window.pcoinpay.onModalWillEnter(yourCallbackFunction)\nwindow.pcoinpay.onModalWillLeave(yourCallbackFunction)\nwindow.pcoinpay.onModalReceiveMessage(yourCallbackFunction)\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"onModalReceiveMessage")," will invoke your callback when a new status has been pushed from PCOINPay Server to the invoice UI. The data format is ",(0,o.kt)("inlineCode",{parentName:"p"},'{invoiceId: "x", status: "y" }')))}m.isMDXComponent=!0}}]);