"use strict";(self.webpackChunkpcoin_website=self.webpackChunkpcoin_website||[]).push([[402],{4137:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(n),u=i,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||l;return n?a.createElement(h,r(r({ref:t},m),{},{components:n})):a.createElement(h,r({ref:t},m))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3271:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return d}});var a=n(7462),i=n(3366),l=(n(7294),n(4137)),r=["components"],o={title:"Developer Notes",sidebar_position:1},s=void 0,p={unversionedId:"Pcoin-Core/Development/developer-notes",id:"Pcoin-Core/Development/developer-notes",title:"Developer Notes",description:"Coding Style (General)",source:"@site/docs/Pcoin-Core/Development/developer-notes.md",sourceDirName:"Pcoin-Core/Development",slug:"/Pcoin-Core/Development/developer-notes",permalink:"/pcoin.dev/docs/Pcoin-Core/Development/developer-notes",draft:!1,editUrl:"https://github.com/pcoinproject/pcoin.dev/edit/master/docs/Pcoin-Core/Development/developer-notes.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Developer Notes",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Depend",permalink:"/pcoin.dev/docs/Pcoin-Core/Building/depends"},next:{title:"Release Process",permalink:"/pcoin.dev/docs/Pcoin-Core/Development/release-process"}},m={},d=[{value:"Coding Style (General)",id:"coding-style-general",level:2},{value:"Coding Style (C++)",id:"coding-style-c",level:2},{value:"Coding Style (Python)",id:"coding-style-python",level:2},{value:"Coding Style (Doxygen-compatible comments)",id:"coding-style-doxygen-compatible-comments",level:2},{value:"Development tips and tricks",id:"development-tips-and-tricks",level:2},{value:"Compiling for debugging",id:"compiling-for-debugging",level:3},{value:"Compiling for gprof profiling",id:"compiling-for-gprof-profiling",level:3},{value:"debug.log",id:"debuglog",level:3},{value:"Testnet and Regtest modes",id:"testnet-and-regtest-modes",level:3},{value:"DEBUG_LOCKORDER",id:"debug_lockorder",level:3},{value:"Valgrind suppressions file",id:"valgrind-suppressions-file",level:3},{value:"Compiling for test coverage",id:"compiling-for-test-coverage",level:3},{value:"Sanitizers",id:"sanitizers",level:3},{value:"Locking/mutex usage notes",id:"lockingmutex-usage-notes",level:2},{value:"Threads",id:"threads",level:2},{value:"Ignoring IDE/editor files",id:"ignoring-ideeditor-files",level:2},{value:"General PCOIN Core",id:"general-pcoin-core",level:2},{value:"Wallet",id:"wallet",level:2},{value:"General C++",id:"general-c",level:2},{value:"C++ data structures",id:"c-data-structures",level:2},{value:"Strings and formatting",id:"strings-and-formatting",level:2},{value:"Variable names",id:"variable-names",level:2},{value:"Threads and synchronization",id:"threads-and-synchronization",level:2},{value:"Scripts",id:"scripts",level:2},{value:"Shebang",id:"shebang",level:3},{value:"Source code organization",id:"source-code-organization",level:2},{value:"GUI",id:"gui",level:2},{value:"Subtrees",id:"subtrees",level:2},{value:"Upgrading LevelDB",id:"upgrading-leveldb",level:2},{value:"File Descriptor Counts",id:"file-descriptor-counts",level:3},{value:"Consensus Compatibility",id:"consensus-compatibility",level:3},{value:"Scripted diffs",id:"scripted-diffs",level:2},{value:"Git and GitHub tips",id:"git-and-github-tips",level:2},{value:"Release notes",id:"release-notes",level:2},{value:"RPC interface guidelines",id:"rpc-interface-guidelines",level:2}],c={toc:d};function u(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"coding-style-general"},"Coding Style (General)"),(0,l.kt)("p",null,"Various coding styles have been used during the history of the codebase,\nand the result is not very consistent. However, we're now trying to converge to\na single style, which is specified below. When writing patches, favor the new\nstyle over attempting to mimic the surrounding style, except for move-only\ncommits."),(0,l.kt)("h2",{id:"coding-style-c"},"Coding Style (C++)"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Indentation and whitespace rules")," as specified in\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/pcoin/blob/master/src/.clang-format"},"src/.clang-format"),". You can use the provided\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/pcoin/tree/master/contrib/devtools#clang-format-diffpy"},"clang-format-diff script"),"\ntool to clean up patches automatically before submission."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Braces on new lines for classes, functions, methods."),(0,l.kt)("li",{parentName:"ul"},"Braces on the same line for everything else."),(0,l.kt)("li",{parentName:"ul"},"4 space indentation (no tabs) for every block except namespaces."),(0,l.kt)("li",{parentName:"ul"},"No indentation for ",(0,l.kt)("inlineCode",{parentName:"li"},"public"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"protected"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"private")," or for ",(0,l.kt)("inlineCode",{parentName:"li"},"namespace"),"."),(0,l.kt)("li",{parentName:"ul"},"No extra spaces inside parenthesis; don't do ( this )"),(0,l.kt)("li",{parentName:"ul"},"No space after function names; one space after ",(0,l.kt)("inlineCode",{parentName:"li"},"if"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"for")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"while"),"."),(0,l.kt)("li",{parentName:"ul"},"If an ",(0,l.kt)("inlineCode",{parentName:"li"},"if")," only has a single-statement ",(0,l.kt)("inlineCode",{parentName:"li"},"then"),"-clause, it can appear\non the same line as the ",(0,l.kt)("inlineCode",{parentName:"li"},"if"),", without braces. In every other case,\nbraces are required, and the ",(0,l.kt)("inlineCode",{parentName:"li"},"then")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"else")," clauses must appear\ncorrectly indented on a new line."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Symbol naming conventions"),". These are preferred in new code, but are not\nrequired when doing so would need changes to significant pieces of existing\ncode."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Constant names are all uppercase, and use ",(0,l.kt)("inlineCode",{parentName:"li"},"_")," to separate words."),(0,l.kt)("li",{parentName:"ul"},"Class names, function names and method names are UpperCamelCase\n(PascalCase). Do not prefix class names with ",(0,l.kt)("inlineCode",{parentName:"li"},"C"),"."),(0,l.kt)("li",{parentName:"ul"},"Test suite naming convention: The Boost test suite in file\n",(0,l.kt)("inlineCode",{parentName:"li"},"src/test/foo_tests.cpp")," should be named ",(0,l.kt)("inlineCode",{parentName:"li"},"foo_tests"),". Test suite names\nmust be unique."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"Miscellaneous")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"++i")," is preferred over ",(0,l.kt)("inlineCode",{parentName:"li"},"i++"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"nullptr")," is preferred over ",(0,l.kt)("inlineCode",{parentName:"li"},"NULL")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"(void*)0"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"static_assert")," is preferred over ",(0,l.kt)("inlineCode",{parentName:"li"},"assert")," where possible. Generally; compile-time checking is preferred over run-time checking."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enum class")," is preferred over ",(0,l.kt)("inlineCode",{parentName:"li"},"enum")," where possible. Scoped enumerations avoid two potential pitfalls/problems with traditional C++ enumerations: implicit conversions to int, and name clashes due to enumerators being exported to the surrounding scope.")))),(0,l.kt)("p",null,"Block style example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"int g_count = 0;\n\nnamespace foo {\nclass Class\n{\n    std::string m_name;\n\npublic:\n    bool Function(const std::string& s, int n)\n    {\n        // Comment summarising what this section of code does\n        for (int i = 0; i < n; ++i) {\n            int total_sum = 0;\n            // When something fails, return early\n            if (!Something()) return false;\n            ...\n            if (SomethingElse(i)) {\n                total_sum += ComputeSomething(g_count);\n            } else {\n                DoSomething(m_name, total_sum);\n            }\n        }\n\n        // Success return is usually at the end\n        return true;\n    }\n}\n} // namespace foo\n")),(0,l.kt)("h2",{id:"coding-style-python"},"Coding Style (Python)"),(0,l.kt)("p",null,"Refer to ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/pcoin/tree/master/test/functional#style-guidelines"},"/test/functional/README.md#style-guidelines"),"."),(0,l.kt)("h2",{id:"coding-style-doxygen-compatible-comments"},"Coding Style (Doxygen-compatible comments)"),(0,l.kt)("p",null,"PCOIN Core uses ",(0,l.kt)("a",{parentName:"p",href:"http://www.doxygen.nl/"},"Doxygen")," to generate its official documentation."),(0,l.kt)("p",null,"Use Doxygen-compatible comment blocks for functions, methods, and fields."),(0,l.kt)("p",null,"For example, to describe a function use:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * ... text ...\n * @param[in] arg1    A description\n * @param[in] arg2    Another argument description\n * @pre Precondition for function...\n */\nbool function(int arg1, const char *arg2)\n")),(0,l.kt)("p",null,"A complete list of ",(0,l.kt)("inlineCode",{parentName:"p"},"@xxx")," commands can be found at ",(0,l.kt)("a",{parentName:"p",href:"http://www.doxygen.nl/manual/commands.html"},"http://www.doxygen.nl/manual/commands.html"),".\nAs Doxygen recognizes the comments by the delimiters (",(0,l.kt)("inlineCode",{parentName:"p"},"/**")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"*/")," in this case), you don't\n",(0,l.kt)("em",{parentName:"p"},"need")," to provide any commands for a comment to be valid; just a description text is fine."),(0,l.kt)("p",null,"To describe a class use the same construct above the class definition:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"/**\n * Alerts are for notifying old versions if they become too obsolete and\n * need to upgrade. The message is displayed in the status bar.\n * @see GetWarnings()\n */\nclass CAlert\n{\n")),(0,l.kt)("p",null,"To describe a member or variable use:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"int var; //!< Detailed description after the member\n")),(0,l.kt)("p",null,"or"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"//! Description before the member\nint var;\n")),(0,l.kt)("p",null,"Also OK:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"///\n/// ... text ...\n///\nbool function2(int arg1, const char *arg2)\n")),(0,l.kt)("p",null,"Not OK (used plenty in the current source, but not picked up):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"//\n// ... text ...\n//\n")),(0,l.kt)("p",null,"A full list of comment syntaxes picked up by Doxygen can be found at ",(0,l.kt)("a",{parentName:"p",href:"http://www.doxygen.nl/manual/docblocks.html"},"http://www.doxygen.nl/manual/docblocks.html"),",\nbut the above styles are favored."),(0,l.kt)("p",null,"Documentation can be generated with ",(0,l.kt)("inlineCode",{parentName:"p"},"make docs")," and cleaned up with ",(0,l.kt)("inlineCode",{parentName:"p"},"make clean-docs"),". The resulting files are located in ",(0,l.kt)("inlineCode",{parentName:"p"},"doc/doxygen/html"),"; open ",(0,l.kt)("inlineCode",{parentName:"p"},"index.html")," to view the homepage."),(0,l.kt)("p",null,"Before running ",(0,l.kt)("inlineCode",{parentName:"p"},"make docs"),", you will need to install dependencies ",(0,l.kt)("inlineCode",{parentName:"p"},"doxygen")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"dot"),". For example, on MacOS via Homebrew:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"brew install doxygen\n")),(0,l.kt)("h2",{id:"development-tips-and-tricks"},"Development tips and tricks"),(0,l.kt)("h3",{id:"compiling-for-debugging"},"Compiling for debugging"),(0,l.kt)("p",null,"Run configure with ",(0,l.kt)("inlineCode",{parentName:"p"},"--enable-debug")," to add additional compiler flags that\nproduce better debugging builds."),(0,l.kt)("h3",{id:"compiling-for-gprof-profiling"},"Compiling for gprof profiling"),(0,l.kt)("p",null,"Run configure with the ",(0,l.kt)("inlineCode",{parentName:"p"},"--enable-gprof")," option, then make."),(0,l.kt)("h3",{id:"debuglog"},"debug.log"),(0,l.kt)("p",null,"If the code is behaving strangely, take a look in the debug.log file in the data directory;\nerror and debugging messages are written there."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"-debug=...")," command-line option controls debugging; running with just ",(0,l.kt)("inlineCode",{parentName:"p"},"-debug")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"-debug=1")," will turn\non all categories (and give you a very large debug.log file)."),(0,l.kt)("p",null,"The Qt code routes ",(0,l.kt)("inlineCode",{parentName:"p"},"qDebug()"),' output to debug.log under category "qt": run with ',(0,l.kt)("inlineCode",{parentName:"p"},"-debug=qt"),"\nto see it."),(0,l.kt)("h3",{id:"testnet-and-regtest-modes"},"Testnet and Regtest modes"),(0,l.kt)("p",null,"Run with the ",(0,l.kt)("inlineCode",{parentName:"p"},"-testnet"),' option to run with "play PCOINs (tPCOIN)" on the test network, if you\nare testing multi-machine code that needs to operate across the internet.'),(0,l.kt)("p",null,"If you are testing something that can run on one machine, run with the ",(0,l.kt)("inlineCode",{parentName:"p"},"-regtest")," option.\nIn regression test mode, blocks can be created on-demand; see ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/pcoin/tree/master/test/functional"},"test/functional/")," for tests\nthat run in ",(0,l.kt)("inlineCode",{parentName:"p"},"-regtest")," mode."),(0,l.kt)("h3",{id:"debug_lockorder"},"DEBUG_LOCKORDER"),(0,l.kt)("p",null,"PCOIN Core is a multi-threaded application, and deadlocks or other\nmulti-threading bugs can be very difficult to track down. The ",(0,l.kt)("inlineCode",{parentName:"p"},"--enable-debug"),"\nconfigure option adds ",(0,l.kt)("inlineCode",{parentName:"p"},"-DDEBUG_LOCKORDER")," to the compiler flags. This inserts\nrun-time checks to keep track of which locks are held, and adds warnings to the\ndebug.log file if inconsistencies are detected."),(0,l.kt)("h3",{id:"valgrind-suppressions-file"},"Valgrind suppressions file"),(0,l.kt)("p",null,"Valgrind is a programming tool for memory debugging, memory leak detection, and\nprofiling. The repo contains a Valgrind suppressions file\n(",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/pcoin/blob/master/contrib/valgrind.supp"},(0,l.kt)("inlineCode",{parentName:"a"},"valgrind.supp")),")\nwhich includes known Valgrind warnings in our dependencies that cannot be fixed\nin-tree. Example use:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"$ valgrind --suppressions=contrib/valgrind.supp src/test/test_pcoin\n$ valgrind --suppressions=contrib/valgrind.supp --leak-check=full \\\n      --show-leak-kinds=all src/test/test_pcoin --log_level=test_suite\n$ valgrind -v --leak-check=full src/pcoind -printtoconsole\n")),(0,l.kt)("h3",{id:"compiling-for-test-coverage"},"Compiling for test coverage"),(0,l.kt)("p",null,"LCOV can be used to generate a test coverage report based upon ",(0,l.kt)("inlineCode",{parentName:"p"},"make check"),"\nexecution. LCOV must be installed on your system (e.g. the ",(0,l.kt)("inlineCode",{parentName:"p"},"lcov")," package\non Debian/Ubuntu)."),(0,l.kt)("p",null,"To enable LCOV report generation during test runs:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"./configure --enable-lcov\nmake\nmake cov\n\n# A coverage report will now be accessible at `./test_pcoin.coverage/index.html`.\n")),(0,l.kt)("h3",{id:"sanitizers"},"Sanitizers"),(0,l.kt)("p",null,'PCOIN can be compiled with various "sanitizers" enabled, which add\ninstrumentation for issues regarding things like memory safety, thread race\nconditions, or undefined behavior. This is controlled with the\n',(0,l.kt)("inlineCode",{parentName:"p"},"--with-sanitizers")," configure flag, which should be a comma separated list of\nsanitizers to enable. The sanitizer list should correspond to supported\n",(0,l.kt)("inlineCode",{parentName:"p"},"-fsanitize=")," options in your compiler. These sanitizers have runtime overhead,\nso they are most useful when testing changes or producing debugging builds.\nSome examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"# Enable both the address sanitizer and the undefined behavior sanitizer\n./configure --with-sanitizers=address,undefined\n# Enable the thread sanitizer\n./configure --with-sanitizers=thread\n")),(0,l.kt)("p",null,"Additional resources:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/AddressSanitizer.html"},"AddressSanitizer")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/LeakSanitizer.html"},"LeakSanitizer")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/MemorySanitizer.html"},"MemorySanitizer")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/ThreadSanitizer.html"},"ThreadSanitizer")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html"},"UndefinedBehaviorSanitizer")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html"},"GCC Instrumentation Options")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/google/sanitizers/wiki"},"Google Sanitizers Wiki")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/bitcoin/bitcoin/issues/12691"},"Issue #12691: Enable -fsanitize flags in Travis"))),(0,l.kt)("h2",{id:"lockingmutex-usage-notes"},"Locking/mutex usage notes"),(0,l.kt)("p",null,"The code is multi-threaded, and uses mutexes and the\n",(0,l.kt)("inlineCode",{parentName:"p"},"LOCK")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"TRY_LOCK")," macros to protect data structures."),(0,l.kt)("p",null,"Deadlocks due to inconsistent lock ordering (thread 1 locks ",(0,l.kt)("inlineCode",{parentName:"p"},"cs_main")," and then\n",(0,l.kt)("inlineCode",{parentName:"p"},"cs_wallet"),", while thread 2 locks them in the opposite order: result, deadlock\nas each waits for the other to release its lock) are a problem. Compile with\n",(0,l.kt)("inlineCode",{parentName:"p"},"-DDEBUG_LOCKORDER")," (or use ",(0,l.kt)("inlineCode",{parentName:"p"},"--enable-debug"),") to get lock order inconsistencies\nreported in the debug.log file."),(0,l.kt)("p",null,"Re-architecting the core code so there are better-defined interfaces\nbetween the various components is a goal, with any necessary locking\ndone by the components (e.g. see the self-contained ",(0,l.kt)("inlineCode",{parentName:"p"},"CKeyStore")," class\nand its ",(0,l.kt)("inlineCode",{parentName:"p"},"cs_KeyStore")," lock for example)."),(0,l.kt)("h2",{id:"threads"},"Threads"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ThreadScriptCheck : Verifies block scripts.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ThreadImport : Loads blocks from blk","*",".dat files or bootstrap.dat.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"StartNode : Starts other threads.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ThreadDNSAddressSeed : Loads addresses of peers from the DNS.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ThreadMapPort : Universal plug-and-play startup/shutdown")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ThreadSocketHandler : Sends/Receives data from peers on port 8333.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ThreadOpenAddedConnections : Opens network connections to added nodes.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ThreadOpenConnections : Initiates new connections to peers.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ThreadMessageHandler : Higher-level message handling (sending and receiving).")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"DumpAddresses : Dumps IP addresses of nodes to peers.dat.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"ThreadRPCServer : Remote procedure call handler, listens on port 8332 for connections and services them.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"BitcoinMiner : Generates PCOINs (if wallet is enabled).")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Shutdown : Does an orderly shutdown of everything."))),(0,l.kt)("h2",{id:"ignoring-ideeditor-files"},"Ignoring IDE/editor files"),(0,l.kt)("p",null,"In closed-source environments in which everyone uses the same IDE it is common\nto add temporary files it produces to the project-wide ",(0,l.kt)("inlineCode",{parentName:"p"},".gitignore")," file."),(0,l.kt)("p",null,"However, in open source software such as PCOIN Core, where everyone uses\ntheir own editors/IDE/tools, it is less common. Only you know what files your\neditor produces and this may change from version to version. The canonical way\nto do this is thus to create your local gitignore. Add this to ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.gitconfig"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"[core]\n        excludesfile = /home/.../.gitignore_global\n")),(0,l.kt)("p",null,"(alternatively, type the command ",(0,l.kt)("inlineCode",{parentName:"p"},"git config --global core.excludesfile ~/.gitignore_global"),"\non a terminal)"),(0,l.kt)("p",null,"Then put your favourite tool's temporary filenames in that file, e.g."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"# NetBeans\nnbproject/\n")),(0,l.kt)("p",null,"Another option is to create a per-repository excludes file ",(0,l.kt)("inlineCode",{parentName:"p"},".git/info/exclude"),".\nThese are not committed but apply only to one repository."),(0,l.kt)("p",null,"If a set of tools is used by the build system or scripts the repository (for\nexample, lcov) it is perfectly acceptable to add its files to ",(0,l.kt)("inlineCode",{parentName:"p"},".gitignore"),"\nand commit them."),(0,l.kt)("h1",{id:"development-guidelines"},"Development guidelines"),(0,l.kt)("p",null,"A few non-style-related recommendations for developers, as well as points to\npay attention to for reviewers of PCOIN Core code."),(0,l.kt)("h2",{id:"general-pcoin-core"},"General PCOIN Core"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"New features should be exposed on RPC first, then can be made available in the GUI"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": RPC allows for better automatic testing. The test suite for\nthe GUI is very limited"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Make sure pull requests pass Travis CI before merging"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"Rationale"),": Makes sure that they pass thorough testing, and that the tester will keep passing\non the master branch. Otherwise all new pull requests will start failing the tests, resulting in\nconfusion and mayhem")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"Explanation"),": If the test suite is to be updated for a change, this has to\nbe done first"))))),(0,l.kt)("h2",{id:"wallet"},"Wallet"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Make sure that no crashes happen with run-time option ",(0,l.kt)("inlineCode",{parentName:"p"},"-disablewallet"),"."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": In RPC code that conditionally uses the wallet (such as\n",(0,l.kt)("inlineCode",{parentName:"li"},"validateaddress"),") it is easy to forget that global pointer ",(0,l.kt)("inlineCode",{parentName:"li"},"pwalletMain"),"\ncan be nullptr. See ",(0,l.kt)("inlineCode",{parentName:"li"},"test/functional/disablewallet.py")," for functional tests\nexercising the API with ",(0,l.kt)("inlineCode",{parentName:"li"},"-disablewallet")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Include ",(0,l.kt)("inlineCode",{parentName:"p"},"db_cxx.h")," (BerkeleyDB header) only when ",(0,l.kt)("inlineCode",{parentName:"p"},"ENABLE_WALLET")," is set"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Otherwise compilation of the disable-wallet build will fail in environments without BerkeleyDB")))),(0,l.kt)("h2",{id:"general-c"},"General C++"),(0,l.kt)("p",null,"For general C++ guidelines, you may refer to the ",(0,l.kt)("a",{parentName:"p",href:"https://isocpp.github.io/CppCoreGuidelines/"},"C++ Core\nGuidelines"),"."),(0,l.kt)("p",null,"Common misconceptions are clarified in those sections:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Passing (non-)fundamental types in the ",(0,l.kt)("a",{parentName:"p",href:"https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-conventional"},"C++ Core\nGuideline"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Assertions should not have side-effects"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Even though the source code is set to refuse to compile\nwith assertions disabled, having side-effects in assertions is unexpected and\nmakes the code harder to understand"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"If you use the ",(0,l.kt)("inlineCode",{parentName:"p"},".h"),", you must link the ",(0,l.kt)("inlineCode",{parentName:"p"},".cpp")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Include files define the interface for the code in implementation files. Including one but\nnot linking the other is confusing. Please avoid that. Moving functions from\nthe ",(0,l.kt)("inlineCode",{parentName:"li"},".h")," to the ",(0,l.kt)("inlineCode",{parentName:"li"},".cpp")," should not result in build errors"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use the RAII (Resource Acquisition Is Initialization) paradigm where possible. For example by using\n",(0,l.kt)("inlineCode",{parentName:"p"},"unique_ptr")," for allocations in a function."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": This avoids memory and resource leaks, and ensures exception safety")))),(0,l.kt)("h2",{id:"c-data-structures"},"C++ data structures"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Never use the ",(0,l.kt)("inlineCode",{parentName:"p"},"std::map []")," syntax when reading from a map, but instead use ",(0,l.kt)("inlineCode",{parentName:"p"},".find()")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"[]")," does an insert (of the default element) if the item doesn't\nexist in the map yet. This has resulted in memory leaks in the past, as well as\nrace conditions (expecting read-read behavior). Using ",(0,l.kt)("inlineCode",{parentName:"li"},"[]")," is fine for ",(0,l.kt)("em",{parentName:"li"},"writing")," to a map"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Do not compare an iterator from one data structure with an iterator of\nanother data structure (even if of the same type)"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),': Behavior is undefined. In C++ parlor this means "may reformat\nthe universe", in practice this has resulted in at least one hard-to-debug crash bug'))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Watch out for out-of-bounds vector access. ",(0,l.kt)("inlineCode",{parentName:"p"},"&vch[vch.size()]")," is illegal,\nincluding ",(0,l.kt)("inlineCode",{parentName:"p"},"&vch[0]")," for an empty vector. Use ",(0,l.kt)("inlineCode",{parentName:"p"},"vch.data()")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"vch.data() + vch.size()")," instead.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Vector bounds checking is only enabled in debug mode. Do not rely on it")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Initialize all non-static class members where they are defined.\nIf this is skipped for a good reason (i.e., optimization on the critical\npath), add an explicit comment about this"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Ensure determinism by avoiding accidental use of uninitialized\nvalues. Also, static analyzers balk about this.\nInitializing the members in the declaration makes it easy to\nspot uninitialized ones.")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class A\n{\n    uint32_t m_count{0};\n}\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"By default, declare single-argument constructors ",(0,l.kt)("inlineCode",{parentName:"p"},"explicit"),"."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": This is a precaution to avoid unintended conversions that might\narise when single-argument constructors are used as implicit conversion\nfunctions."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use explicitly signed or unsigned ",(0,l.kt)("inlineCode",{parentName:"p"},"char"),"s, or even better ",(0,l.kt)("inlineCode",{parentName:"p"},"uint8_t")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"int8_t"),". Do not use bare ",(0,l.kt)("inlineCode",{parentName:"p"},"char")," unless it is to pass to a third-party API.\nThis type can be signed or unsigned depending on the architecture, which can\nlead to interoperability problems or dangerous conditions such as\nout-of-bounds array accesses")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Prefer explicit constructions over implicit ones that rely on 'magical' C++ behavior"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Easier to understand what is happening, thus easier to spot mistakes, even for those\nthat are not language lawyers"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"Span")," as function argument when it can operate on any range-like container."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Compared to ",(0,l.kt)("inlineCode",{parentName:"li"},"Foo(const vector<int>&)")," this avoids the need for a (potentially expensive)\nconversion to vector if the caller happens to have the input stored in another type of container.\nHowever, be aware of the pitfalls documented in ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/pcoinproject/pcoin/blob/master/src/span.h"},"span.h"),".")))),(0,l.kt)("h2",{id:"strings-and-formatting"},"Strings and formatting"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Be careful of ",(0,l.kt)("inlineCode",{parentName:"p"},"LogPrint")," versus ",(0,l.kt)("inlineCode",{parentName:"p"},"LogPrintf"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"LogPrint")," takes a ",(0,l.kt)("inlineCode",{parentName:"p"},"category")," argument, ",(0,l.kt)("inlineCode",{parentName:"p"},"LogPrintf")," does not."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Confusion of these can result in runtime exceptions due to\nformatting mismatch, and it is easy to get wrong because of subtly similar naming"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"std::string"),", avoid C string manipulation functions"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": C++ string handling is marginally safer, less scope for\nbuffer overflows and surprises with ",(0,l.kt)("inlineCode",{parentName:"li"},"\\0")," characters. Also some C string manipulations\ntend to act differently depending on platform, or even the user locale"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"ParseInt32"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ParseInt64"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ParseUInt32"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ParseUInt64"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ParseDouble")," from ",(0,l.kt)("inlineCode",{parentName:"p"},"utilstrencodings.h")," for number parsing"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": These functions do overflow checking, and avoid pesky locale issues."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Avoid using locale dependent functions if possible."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"Rationale"),": Unnecessary locale dependence can cause bugs that are very tricky to isolate and fix.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"These functions are known to be locale dependent:\n",(0,l.kt)("inlineCode",{parentName:"p"},"alphasort"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"asctime"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"asprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"atof"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"atoi"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"atol"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"atoll"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"atoq"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"btowc"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ctime"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"dprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"fgetwc"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"fgetws"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"fprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"fputwc"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"fputws"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"fscanf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"fwprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"getdate"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"getwc"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"getwchar"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isalnum"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"isalpha"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isblank"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"iscntrl"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isdigit"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isgraph"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"islower"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isprint"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"ispunct"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isspace"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isupper"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"iswalnum"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"iswalpha"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"iswblank"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"iswcntrl"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"iswctype"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"iswdigit"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"iswgraph"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"iswlower"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"iswprint"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"iswpunct"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"iswspace"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"iswupper"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"iswxdigit"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"isxdigit"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"mblen"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"mbrlen"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"mbrtowc"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"mbsinit"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"mbsnrtowcs"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"mbsrtowcs"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"mbstowcs"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"mbtowc"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"mktime"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"putwc"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"putwchar"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"scanf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"snprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"sprintf"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"sscanf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"stoi"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"stol"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"stoll"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strcasecmp"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strcasestr"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strcoll"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"strfmon"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strftime"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strncasecmp"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strptime"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strtod"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strtof"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"strtoimax"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strtol"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strtold"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strtoll"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strtoq"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strtoul"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"strtoull"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strtoumax"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strtouq"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"strxfrm"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"swprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"tolower"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"toupper"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"towctrans"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"towlower"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"towupper"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"ungetwc"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"vasprintf"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"vdprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"versionsort"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"vfprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"vfscanf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"vfwprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"vprintf"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"vscanf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"vsnprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"vsprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"vsscanf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"vswprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"vwprintf"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"wcrtomb"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcscasecmp"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcscoll"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcsftime"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcsncasecmp"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcsnrtombs"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"wcsrtombs"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcstod"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcstof"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcstoimax"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcstol"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcstold"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"wcstoll"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcstombs"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcstoul"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcstoull"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcstoumax"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcswidth"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"wcsxfrm"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wctob"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wctomb"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wctrans"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wctype"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wcwidth"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"wprintf"))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"For ",(0,l.kt)("inlineCode",{parentName:"p"},"strprintf"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"LogPrint"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"LogPrintf")," formatting characters don't need size specifiers"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": PCOIN Core uses tinyformat, which is type safe. Leave them out to avoid confusion")))),(0,l.kt)("h2",{id:"variable-names"},"Variable names"),(0,l.kt)("p",null,"Although the shadowing warning (",(0,l.kt)("inlineCode",{parentName:"p"},"-Wshadow"),") is not enabled by default (it prevents issues rising\nfrom using a different variable with the same name),\nplease name variables so that their names do not shadow variables defined in the source code."),(0,l.kt)("p",null,"E.g. in member initializers, prepend ",(0,l.kt)("inlineCode",{parentName:"p"},"_")," to the argument name shadowing the\nmember name:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"class AddressBookPage\n{\n    Mode m_mode;\n}\n\nAddressBookPage::AddressBookPage(Mode _mode)\n    : m_mode(_mode)\n...\n")),(0,l.kt)("p",null,"When using nested cycles, do not name the inner cycle variable the same as in\nupper cycle etc."),(0,l.kt)("h2",{id:"threads-and-synchronization"},"Threads and synchronization"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Build and run tests with ",(0,l.kt)("inlineCode",{parentName:"p"},"-DDEBUG_LOCKORDER")," to verify that no potential\ndeadlocks are introduced. This is defined by default when configuring\nwith ",(0,l.kt)("inlineCode",{parentName:"p"},"--enable-debug"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"When using ",(0,l.kt)("inlineCode",{parentName:"p"},"LOCK"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"TRY_LOCK")," be aware that the lock exists in the context of\nthe current scope, so surround the statement and the code that needs the lock\nwith braces"),(0,l.kt)("p",{parentName:"li"},"OK:"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"{\n    TRY_LOCK(cs_vNodes, lockNodes);\n    ...\n}\n")),(0,l.kt)("p",null,"Wrong:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"TRY_LOCK(cs_vNodes, lockNodes);\n{\n    ...\n}\n")),(0,l.kt)("h2",{id:"scripts"},"Scripts"),(0,l.kt)("h3",{id:"shebang"},"Shebang"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use ",(0,l.kt)("inlineCode",{parentName:"p"},"#!/usr/bin/env bash")," instead of obsolete ",(0,l.kt)("inlineCode",{parentName:"p"},"#!/bin/bash"),"."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("a",{parentName:"p",href:"https://github.com/dylanaraps/pure-bash-bible#shebang"},(0,l.kt)("em",{parentName:"a"},"Rationale")),":"),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"#!/bin/bash")," assumes it is always installed to /bin/ which can cause issues;"),(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"#!/usr/bin/env bash")," searches the user's PATH to find the bash binary."))),(0,l.kt)("p",{parentName:"li"},"OK:"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"#!/usr/bin/env bash\n")),(0,l.kt)("p",null,"Wrong:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n")),(0,l.kt)("h2",{id:"source-code-organization"},"Source code organization"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Implementation code should go into the ",(0,l.kt)("inlineCode",{parentName:"p"},".cpp")," file and not the ",(0,l.kt)("inlineCode",{parentName:"p"},".h"),", unless necessary due to template usage or\nwhen performance due to inlining is critical"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Shorter and simpler header files are easier to read, and reduce compile time"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use only the lowercase alphanumerics (",(0,l.kt)("inlineCode",{parentName:"p"},"a-z0-9"),"), underscore (",(0,l.kt)("inlineCode",{parentName:"p"},"_"),") and hyphen (",(0,l.kt)("inlineCode",{parentName:"p"},"-"),") in source code filenames."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"grep"),":ing and auto-completing filenames is easier when using a consistent\nnaming pattern. Potential problems when building on case-insensitive filesystems are\navoided when using only lowercase characters in source code filenames."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Every ",(0,l.kt)("inlineCode",{parentName:"p"},".cpp")," and ",(0,l.kt)("inlineCode",{parentName:"p"},".h")," file should ",(0,l.kt)("inlineCode",{parentName:"p"},"#include")," every header file it directly uses classes, functions or other\ndefinitions from, even if those headers are already included indirectly through other headers."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Excluding headers because they are already indirectly included results in compilation\nfailures when those indirect dependencies change. Furthermore, it obscures what the real code\ndependencies are."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Don't import anything into the global namespace (",(0,l.kt)("inlineCode",{parentName:"p"},"using namespace ..."),"). Use\nfully specified types such as ",(0,l.kt)("inlineCode",{parentName:"p"},"std::string"),"."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Avoids symbol conflicts"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Terminate namespaces with a comment (",(0,l.kt)("inlineCode",{parentName:"p"},"// namespace mynamespace"),"). The comment\nshould be placed on the same line as the brace closing the namespace, e.g."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"namespace mynamespace {\n...\n} // namespace mynamespace\n\nnamespace {\n...\n} // namespace\n")),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"Rationale"),": Avoids confusion about the namespace context")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use include guards to avoid the problem of double inclusion. The header file\n",(0,l.kt)("inlineCode",{parentName:"p"},"foo/bar.h")," should use the include guard identifier ",(0,l.kt)("inlineCode",{parentName:"p"},"BITCOIN_FOO_BAR_H"),", e.g."))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-cpp"},"#ifndef BITCOIN_FOO_BAR_H\n#define BITCOIN_FOO_BAR_H\n...\n#endif // BITCOIN_FOO_BAR_H\n")),(0,l.kt)("h2",{id:"gui"},"GUI"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Do not display or manipulate dialogs in model code (classes ",(0,l.kt)("inlineCode",{parentName:"p"},"*Model"),")"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Model classes pass through events and data from the core, they\nshould not interact with the user. That's where View classes come in. The converse also\nholds: try to not directly access core data structures from Views.")))),(0,l.kt)("h2",{id:"subtrees"},"Subtrees"),(0,l.kt)("p",null,"Several parts of the repository are subtrees of software maintained elsewhere."),(0,l.kt)("p",null,"Some of these are maintained by active developers of Bitcoin Core, in which case changes should probably go\ndirectly upstream without being PRed directly against the project. They will be merged back in the next\nsubtree merge."),(0,l.kt)("p",null,"Others are external projects without a tight relationship with our project. Changes to these should also\nbe sent upstream but bugfixes may also be prudent to PR against PCOIN Core so that they can be integrated\nquickly. Cosmetic changes should be purely taken upstream."),(0,l.kt)("p",null,"There is a tool in ",(0,l.kt)("inlineCode",{parentName:"p"},"test/lint/git-subtree-check.sh")," (",(0,l.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/pcoin/tree/master/test/lint#git-subtree-checksh"},"instructions"),") to check a subtree directory for consistency with\nits upstream repository."),(0,l.kt)("p",null,"Current subtrees include:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"src/leveldb"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Upstream at ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/google/leveldb"},"https://github.com/google/leveldb")," ; Maintained by Google, but\nopen important PRs to Core to avoid delay."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("div",{parentName:"li",className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Follow the instructions in ",(0,l.kt)("a",{parentName:"p",href:"#upgrading-leveldb"},"Upgrading LevelDB")," when\nmerging upstream changes to the LevelDB subtree.")))))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"src/crc32c"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Used by leveldb for hardware acceleration of CRC32C checksums for data integrity."),(0,l.kt)("li",{parentName:"ul"},"Upstream at ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/google/crc32c"},"https://github.com/google/crc32c")," ; Maintained by Google."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"src/secp256k1"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Upstream at ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/bitcoin-core/secp256k1/"},"https://github.com/bitcoin-core/secp256k1/")," ; actively maintained by Core contributors."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"src/univalue"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Upstream at ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/bitcoin-core/univalue"},"https://github.com/bitcoin-core/univalue")," ; actively maintained by Core contributors, deviates from upstream ",(0,l.kt)("a",{parentName:"li",href:"https://github.com/jgarzik/univalue"},"https://github.com/jgarzik/univalue"))))),(0,l.kt)("h2",{id:"upgrading-leveldb"},"Upgrading LevelDB"),(0,l.kt)("p",null,"Extra care must be taken when upgrading LevelDB. This section explains issues\nyou must be aware of."),(0,l.kt)("h3",{id:"file-descriptor-counts"},"File Descriptor Counts"),(0,l.kt)("p",null,"In most configurations we use the default LevelDB value for ",(0,l.kt)("inlineCode",{parentName:"p"},"max_open_files"),",\nwhich is 1000 at the time of this writing. If LevelDB actually uses this many\nfile descriptors it will cause problems with PCOIN's ",(0,l.kt)("inlineCode",{parentName:"p"},"select()")," loop, because\nit may cause new sockets to be created where the fd value is >= 1024. For this\nreason, on 64-bit Unix systems we rely on an internal LevelDB optimization that\nuses ",(0,l.kt)("inlineCode",{parentName:"p"},"mmap()")," + ",(0,l.kt)("inlineCode",{parentName:"p"},"close()")," to open table files without actually retaining\nreferences to the table file descriptors. If you are upgrading LevelDB, you must\nsanity check the changes to make sure that this assumption remains valid."),(0,l.kt)("p",null,"In addition to reviewing the upstream changes in ",(0,l.kt)("inlineCode",{parentName:"p"},"env_posix.cc"),", you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"lsof")," to\ncheck this. For example, on Linux this command will show open ",(0,l.kt)("inlineCode",{parentName:"p"},".ldb")," file counts:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'$ lsof -p $(pidof pcoind) |\\\n    awk \'BEGIN { fd=0; mem=0; } /ldb$/ { if ($4 == "mem") mem++; else fd++ } END { printf "mem = %s, fd = %s\\n", mem, fd}\'\nmem = 119, fd = 0\n')),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"mem")," value shows how many files are mmap'ed, and the ",(0,l.kt)("inlineCode",{parentName:"p"},"fd")," value shows you\nmany file descriptors these files are using. You should check that ",(0,l.kt)("inlineCode",{parentName:"p"},"fd")," is a\nsmall number (usually 0 on 64-bit hosts)."),(0,l.kt)("p",null,"See the notes in the ",(0,l.kt)("inlineCode",{parentName:"p"},"SetMaxOpenFiles()")," function in ",(0,l.kt)("inlineCode",{parentName:"p"},"dbwrapper.cc")," for more\ndetails."),(0,l.kt)("h3",{id:"consensus-compatibility"},"Consensus Compatibility"),(0,l.kt)("p",null,"It is possible for LevelDB changes to inadvertently change consensus\ncompatibility between nodes. This happened in Bitcoin 0.8 (when LevelDB was\nfirst introduced). When upgrading LevelDB you should review the upstream changes\nto check for issues affecting consensus compatibility."),(0,l.kt)("p",null,'For example, if LevelDB had a bug that accidentally prevented a key from being\nreturned in an edge case, and that bug was fixed upstream, the bug "fix" would\nbe an incompatible consensus change. In this situation the correct behavior\nwould be to revert the upstream fix before applying the updates to Bitcoin\'s\ncopy of LevelDB. In general you should be wary of any upstream changes affecting\nwhat data is returned from LevelDB queries.'),(0,l.kt)("h2",{id:"scripted-diffs"},"Scripted diffs"),(0,l.kt)("p",null,"For reformatting and refactoring commits where the changes can be easily automated using a bash script, we use\nscripted-diff commits. The bash script is included in the commit message and our Travis CI job checks that\nthe result of the script is identical to the commit. This aids reviewers since they can verify that the script\ndoes exactly what it's supposed to do. It is also helpful for rebasing (since the same script can just be re-run\non the new master commit)."),(0,l.kt)("p",null,"To create a scripted-diff:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"start the commit message with ",(0,l.kt)("inlineCode",{parentName:"li"},"scripted-diff:")," (and then a description of the diff on the same line)"),(0,l.kt)("li",{parentName:"ul"},"in the commit message include the bash script between lines containing just the following text:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-BEGIN VERIFY SCRIPT-")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"-END VERIFY SCRIPT-"))))),(0,l.kt)("p",null,"The scripted-diff is verified by the tool ",(0,l.kt)("inlineCode",{parentName:"p"},"test/lint/commit-script-check.sh"),". The tool's default behavior when supplied\nwith a commit is to verify all scripted-diffs from the beginning of time up to said commit. Internally, the tool passes\nthe first supplied argument to ",(0,l.kt)("inlineCode",{parentName:"p"},"git rev-list --reverse")," to determine which commits to verify script-diffs for, ignoring\ncommits that don't conform to the commit message format described above."),(0,l.kt)("p",null,"For development, it might be more convenient to verify all scripted-diffs in a range ",(0,l.kt)("inlineCode",{parentName:"p"},"A..B"),", for example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"test/lint/commit-script-check.sh origin/master..HEAD\n")),(0,l.kt)("p",null,"Commit ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bitcoin/commit/bb81e173"},(0,l.kt)("inlineCode",{parentName:"a"},"bb81e173"))," is an example of a scripted-diff."),(0,l.kt)("h2",{id:"git-and-github-tips"},"Git and GitHub tips"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"For resolving merge/rebase conflicts, it can be useful to enable diff3 style using\n",(0,l.kt)("inlineCode",{parentName:"li"},"git config merge.conflictstyle diff3"),". Instead of")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"        <<<\n        yours\n        ===\n        theirs\n        >>>\n")),(0,l.kt)("p",null,"you will see"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"        <<<\n        yours\n        |||\n        original\n        ===\n        theirs\n        >>>\n")),(0,l.kt)("p",null,"This may make it much clearer what caused the conflict. In this style, you can often just look\nat what changed between ",(0,l.kt)("em",{parentName:"p"},"original")," and ",(0,l.kt)("em",{parentName:"p"},"theirs"),", and mechanically apply that to ",(0,l.kt)("em",{parentName:"p"},"yours")," (or the other way around)."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"When reviewing patches which change indentation in C++ files, use ",(0,l.kt)("inlineCode",{parentName:"p"},"git diff -w")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"git show -w"),". This makes\nthe diff algorithm ignore whitespace changes. This feature is also available on github.com, by adding ",(0,l.kt)("inlineCode",{parentName:"p"},"?w=1"),"\nat the end of any URL which shows a diff.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"When reviewing patches that change symbol names in many places, use ",(0,l.kt)("inlineCode",{parentName:"p"},"git diff --word-diff"),". This will instead\nof showing the patch as deleted/added ",(0,l.kt)("em",{parentName:"p"},"lines"),", show deleted/added ",(0,l.kt)("em",{parentName:"p"},"words"),".")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"When reviewing patches that move code around, try using\n",(0,l.kt)("inlineCode",{parentName:"p"},"git diff --patience commit~:old/file.cpp commit:new/file/name.cpp"),", and ignoring everything except the\nmoved body of code which should show up as neither ",(0,l.kt)("inlineCode",{parentName:"p"},"+")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"-")," lines. In case it was not a pure move, this may\neven work when combined with the ",(0,l.kt)("inlineCode",{parentName:"p"},"-w")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"--word-diff")," options described above.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"When looking at other's pull requests, it may make sense to add the following section to your ",(0,l.kt)("inlineCode",{parentName:"p"},".git/config"),"\nfile:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},'  [remote "upstream-pull"]\n          fetch = +refs/pull/*:refs/remotes/upstream-pull/*\n          url = git@github.com:pcoinproject/pcoin.git\n')),(0,l.kt)("p",{parentName:"li"},"This will add an ",(0,l.kt)("inlineCode",{parentName:"p"},"upstream-pull")," remote to your git repository, which can be fetched using ",(0,l.kt)("inlineCode",{parentName:"p"},"git fetch --all"),"\nor ",(0,l.kt)("inlineCode",{parentName:"p"},"git fetch upstream-pull"),". Afterwards, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"upstream-pull/NUMBER/head")," in arguments to ",(0,l.kt)("inlineCode",{parentName:"p"},"git show"),",\n",(0,l.kt)("inlineCode",{parentName:"p"},"git checkout")," and anywhere a commit id would be acceptable to see the changes from pull request NUMBER."))),(0,l.kt)("h2",{id:"release-notes"},"Release notes"),(0,l.kt)("p",null,"Release notes should be written for any PR that:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"introduces a notable new feature"),(0,l.kt)("li",{parentName:"ul"},"fixes a significant bug"),(0,l.kt)("li",{parentName:"ul"},"changes an API or configuration model"),(0,l.kt)("li",{parentName:"ul"},"makes any other visible change to the end-user experience.")),(0,l.kt)("p",null,"Release notes should be added to a PR-specific release note file at\n",(0,l.kt)("inlineCode",{parentName:"p"},"/doc/release-notes-<PR number>.md")," to avoid conflicts between multiple PRs.\nAll ",(0,l.kt)("inlineCode",{parentName:"p"},"release-notes*")," files are merged into a single\n",(0,l.kt)("inlineCode",{parentName:"p"},"/doc/release-notes.md")," file prior to the release."),(0,l.kt)("h2",{id:"rpc-interface-guidelines"},"RPC interface guidelines"),(0,l.kt)("p",null,"A few guidelines for introducing and reviewing new RPC interfaces:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Method naming: use consecutive lower-case names such as ",(0,l.kt)("inlineCode",{parentName:"p"},"getrawtransaction")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"submitblock")),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Consistency with existing interface."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Argument naming: use snake case ",(0,l.kt)("inlineCode",{parentName:"p"},"fee_delta")," (and not, e.g. camel case ",(0,l.kt)("inlineCode",{parentName:"p"},"feeDelta"),")"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Consistency with existing interface."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Use the JSON parser for parsing, don't manually parse integers or strings from\narguments unless absolutely necessary."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"Rationale"),": Introduces hand-rolled string manipulation code at both the caller and callee sites,\nwhich is error prone, and it is easy to get things such as escaping wrong.\nJSON already supports nested data structures, no need to re-invent the wheel.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"Exception"),": AmountFromValue can parse amounts as string. This was introduced because many JSON\nparsers and formatters hard-code handling decimal numbers as floating point\nvalues, resulting in potential loss of precision. This is unacceptable for\nmonetary values. ",(0,l.kt)("strong",{parentName:"p"},"Always")," use ",(0,l.kt)("inlineCode",{parentName:"p"},"AmountFromValue")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"ValueFromAmount")," when\ninputting or outputting monetary values. The only exceptions to this are\n",(0,l.kt)("inlineCode",{parentName:"p"},"prioritisetransaction")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"getblocktemplate")," because their interface\nis specified as-is in BIP22.")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Missing arguments and 'null' should be treated the same: as default values. If there is no\ndefault value, both cases should fail in the same way. The easiest way to follow this\nguideline is detect unspecified arguments with ",(0,l.kt)("inlineCode",{parentName:"p"},"params[x].isNull()")," instead of\n",(0,l.kt)("inlineCode",{parentName:"p"},"params.size() <= x"),". The former returns true if the argument is either null or missing,\nwhile the latter returns true if is missing, and false if it is null."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Avoids surprises when switching to name-based arguments. Missing name-based arguments\nare passed as 'null'."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Try not to overload methods on argument type. E.g. don't make ",(0,l.kt)("inlineCode",{parentName:"p"},"getblock(true)")," and ",(0,l.kt)("inlineCode",{parentName:"p"},'getblock("hash")'),"\ndo different things."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"Rationale"),": This is impossible to use with ",(0,l.kt)("inlineCode",{parentName:"p"},"pcoin-cli"),", and can be surprising to users.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"Exception"),": Some RPC calls can take both an ",(0,l.kt)("inlineCode",{parentName:"p"},"int")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"bool"),", most notably when a bool was switched\nto a multi-value, or due to other historical reasons. ",(0,l.kt)("strong",{parentName:"p"},"Always")," have false map to 0 and\ntrue to 1 in this case.")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Don't forget to fill in the argument names correctly in the RPC command table."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": If not, the call can not be used with name-based arguments."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Set okSafeMode in the RPC command table to a sensible value: safe mode is when the\nblockchain is regarded to be in a confused state, and the client deems it unsafe to\ndo anything irreversible such as send. Anything that just queries should be permitted."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": Troubleshooting a node in safe mode is difficult if half the\nRPCs don't work."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Add every non-string RPC argument ",(0,l.kt)("inlineCode",{parentName:"p"},"(method, idx, name)")," to the table ",(0,l.kt)("inlineCode",{parentName:"p"},"vRPCConvertParams")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"rpc/client.cpp"),"."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"pcoin-cli")," and the GUI debug console use this table to determine how to\nconvert a plaintext command line to JSON. If the types don't match, the method can be unusable\nfrom there."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"A RPC method must either be a wallet method or a non-wallet method. Do not\nintroduce new methods that differ in behavior based on presence of a wallet."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": as well as complicating the implementation and interfering\nwith the introduction of multi-wallet, wallet and non-wallet code should be\nseparated to avoid introducing circular dependencies between code units."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Try to make the RPC response a JSON object."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": If a RPC response is not a JSON object then it is harder to avoid API breakage if\nnew data in the response is needed."))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Be aware of RPC method aliases and generally avoid registering the same\ncallback function pointer for different RPCs."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"Rationale"),": RPC methods registered with the same function pointer will be\nconsidered aliases and only the first method name will show up in the\n",(0,l.kt)("inlineCode",{parentName:"p"},"help")," rpc command list.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("em",{parentName:"p"},"Exception"),": Using RPC method aliases may be appropriate in cases where a\nnew RPC is replacing a deprecated RPC, to avoid both RPCs confusingly\nshowing up in the command list.")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Wallet RPCs call BlockUntilSyncedToCurrentChain to maintain consistency with\n",(0,l.kt)("inlineCode",{parentName:"p"},"getblockchaininfo"),"'s state immediately prior to the call's execution. Wallet\nRPCs whose behavior does ",(0,l.kt)("em",{parentName:"p"},"not")," depend on the current chainstate may omit this\ncall."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"Rationale"),": In previous versions of Bitcoin Core, the wallet was always\nin-sync with the chainstate (by virtue of them all being updated in the\nsame cs_main lock). In order to maintain the behavior that wallet RPCs\nreturn results as of at least the highest best-known block an RPC\nclient may be aware of prior to entering a wallet RPC call, we must block\nuntil the wallet is caught up to the chainstate as of the RPC call's entry.\nThis also makes the API much easier for RPC clients to reason about.")))))}u.isMDXComponent=!0}}]);