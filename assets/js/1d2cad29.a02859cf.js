"use strict";(self.webpackChunkpcoin_website=self.webpackChunkpcoin_website||[]).push([[5259],{4137:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},s=Object.keys(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(i=0;i<s.length;i++)n=s[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),c=u(n),m=o,h=c["".concat(l,".").concat(m)]||c[m]||p[m]||s;return n?i.createElement(h,r(r({ref:t},d),{},{components:n})):i.createElement(h,r({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=c;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,r[1]=a;for(var u=2;u<s;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6126:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return a},metadata:function(){return u},toc:function(){return p}});var i=n(3117),o=n(102),s=(n(7294),n(4137)),r=["components"],a={title:"Windows Build guide",description:"Some notes on how to build PCOIN Core in Windows.",sidebar_position:3},l=void 0,u={unversionedId:"Pcoin-Core/Building/build-windows",id:"Pcoin-Core/Building/build-windows",title:"Windows Build guide",description:"Some notes on how to build PCOIN Core in Windows.",source:"@site/docs/Pcoin-Core/Building/build-windows.md",sourceDirName:"Pcoin-Core/Building",slug:"/Pcoin-Core/Building/build-windows",permalink:"/docs/Pcoin-Core/Building/build-windows",draft:!1,editUrl:"https://github.com/pcoinproject/pcoin.dev/edit/master/docs/Pcoin-Core/Building/build-windows.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Windows Build guide",description:"Some notes on how to build PCOIN Core in Windows.",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"UNIX Build guide",permalink:"/docs/Pcoin-Core/Building/build-unix"},next:{title:"Gitian building",permalink:"/docs/Pcoin-Core/Building/gitian-building/"}},d={},p=[{value:"Installing Windows Subsystem for Linux",id:"installing-windows-subsystem-for-linux",level:2},{value:"Cross-compilation for Ubuntu and Windows Subsystem for Linux",id:"cross-compilation-for-ubuntu-and-windows-subsystem-for-linux",level:2},{value:"Building for 64-bit Windows",id:"building-for-64-bit-windows",level:2},{value:"Depends system",id:"depends-system",level:2},{value:"Installation",id:"installation",level:2},{value:"Footnotes",id:"footnotes",level:2}],c={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,r);return(0,s.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Below are some notes on how to build Pcoin Core for Windows."),(0,s.kt)("p",null,"The options known to work for building Pcoin Core on Windows are:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"On Linux, using the ",(0,s.kt)("a",{parentName:"li",href:"https://mingw-w64.org/doku.php"},"Mingw-w64")," cross compiler tool chain. Ubuntu Bionic 18.04 is required\nand is the platform used to build the Pcoin Core Windows release binaries."),(0,s.kt)("li",{parentName:"ul"},"On Windows, using ",(0,s.kt)("a",{parentName:"li",href:"https://msdn.microsoft.com/commandline/wsl/about"},"Windows Subsystem for Linux (WSL)")," and the Mingw-w64 cross compiler tool chain.")),(0,s.kt)("p",null,"Other options which may work, but which have not been extensively tested are (please contribute instructions):"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"On Windows, using a POSIX compatibility layer application such as ",(0,s.kt)("a",{parentName:"li",href:"http://www.cygwin.com/"},"cygwin")," or ",(0,s.kt)("a",{parentName:"li",href:"http://www.msys2.org/"},"msys2"),"."),(0,s.kt)("li",{parentName:"ul"},"On Windows, using a native compiler tool chain such as ",(0,s.kt)("a",{parentName:"li",href:"https://www.visualstudio.com"},"Visual Studio"),".")),(0,s.kt)("h2",{id:"installing-windows-subsystem-for-linux"},"Installing Windows Subsystem for Linux"),(0,s.kt)("p",null,"With Windows 10, Microsoft has released a new feature named the ",(0,s.kt)("a",{parentName:"p",href:"https://msdn.microsoft.com/commandline/wsl/about"},"Windows\nSubsystem for Linux (WSL)"),". This\nfeature allows you to run a bash shell directly on Windows in an Ubuntu-based\nenvironment. Within this environment you can cross compile for Windows without\nthe need for a separate Linux VM or server. Note that while WSL can be installed with\nother Linux variants, such as OpenSUSE, the following instructions have only been\ntested with Ubuntu."),(0,s.kt)("p",null,"This feature is not supported in versions of Windows prior to Windows 10 or on\nWindows Server SKUs. In addition, it is available ",(0,s.kt)("a",{parentName:"p",href:"https://msdn.microsoft.com/en-us/commandline/wsl/install_guide"},"only for 64-bit versions of\nWindows"),"."),(0,s.kt)("p",null,"Full instructions to install WSL are available on the above link.\nTo install WSL on Windows 10 with Fall Creators Update installed (version >= 16215.0) do the following:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"Enable the Windows Subsystem for Linux feature")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Open the Windows Features dialog (",(0,s.kt)("inlineCode",{parentName:"li"},"OptionalFeatures.exe"),")"),(0,s.kt)("li",{parentName:"ul"},"Enable 'Windows Subsystem for Linux'"),(0,s.kt)("li",{parentName:"ul"},"Click 'OK' and restart if necessary")),(0,s.kt)("ol",{start:2},(0,s.kt)("li",{parentName:"ol"},"Install Ubuntu")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'Open Microsoft Store and search for "Ubuntu 18.04" or use ',(0,s.kt)("a",{parentName:"li",href:"https://www.microsoft.com/store/productId/9N9TNGVNDL3Q"},"this link")),(0,s.kt)("li",{parentName:"ul"},"Click Install")),(0,s.kt)("ol",{start:3},(0,s.kt)("li",{parentName:"ol"},"Complete Installation")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'Open a cmd prompt and type "Ubuntu1804"'),(0,s.kt)("li",{parentName:"ul"},"Create a new UNIX user account (this is a separate account from your Windows account)")),(0,s.kt)("p",null,'After the bash shell is active, you can follow the instructions below, starting\nwith the "Cross-compilation" section. Compiling the 64-bit version is\nrecommended, but it is possible to compile the 32-bit version.'),(0,s.kt)("h2",{id:"cross-compilation-for-ubuntu-and-windows-subsystem-for-linux"},"Cross-compilation for Ubuntu and Windows Subsystem for Linux"),(0,s.kt)("p",null,"The steps below can be performed on Ubuntu (including in a VM) or WSL. The depends system\nwill also work on other Linux distributions, however the commands for\ninstalling the toolchain will be different."),(0,s.kt)("p",null,"First, install the general dependencies:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt update\nsudo apt upgrade\nsudo apt install build-essential libtool autotools-dev automake pkg-config bsdmainutils curl git\n")),(0,s.kt)("p",null,"A host toolchain (",(0,s.kt)("inlineCode",{parentName:"p"},"build-essential"),") is necessary because some dependency\npackages need to build host utilities that are used in the build process."),(0,s.kt)("p",null,"See ",(0,s.kt)("a",{parentName:"p",href:"dependencies"},"dependencies")," for a complete overview."),(0,s.kt)("p",null,"If you want to build the windows installer with ",(0,s.kt)("inlineCode",{parentName:"p"},"make deploy")," you need ",(0,s.kt)("a",{parentName:"p",href:"https://nsis.sourceforge.io/Main_Page"},"NSIS"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt install nsis\n")),(0,s.kt)("p",null,"Acquire the source in the usual way:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/pcoinproject/pcoin.git\ncd pcoin\n")),(0,s.kt)("h2",{id:"building-for-64-bit-windows"},"Building for 64-bit Windows"),(0,s.kt)("p",null,"The first step is to install the mingw-w64 cross-compilation tool chain:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"sudo apt install g++-mingw-w64-x86-64\n")),(0,s.kt)("p",null,"Ubuntu Bionic 18.04 ",(0,s.kt)("sup",null,(0,s.kt)("a",{parentName:"p",href:"#footnote1"},"1")),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"sudo update-alternatives --config x86_64-w64-mingw32-g++ # Set the default mingw32 g++ compiler option to posix.\n")),(0,s.kt)("p",null,"Once the toolchain is installed the build steps are common:"),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Note that for WSL the Pcoin Core source path MUST be somewhere in the default mount file system, for\nexample /usr/src/pcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\nThis means you cannot use a directory that is located directly on the host Windows file system to perform the build.")),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("p",{parentName:"admonition"},"Additional WSL Note: WSL support for ",(0,s.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/archive/blogs/wsl/windows-and-ubuntu-interoperability#launching-win32-applications-from-within-wsl"},"launching Win32 applications"),"\nresults in ",(0,s.kt)("inlineCode",{parentName:"p"},"Autoconf")," configure scripts being able to execute Windows Portable Executable files. This can cause\nunexpected behaviour during the build, such as Win32 error dialogs for missing libraries. The recommended approach\nis to temporarily disable WSL support for Win32 applications.")),(0,s.kt)("p",null,"Build:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'PATH=$(echo "$PATH" | sed -e \'s/:\\/mnt.*//g\') # strip out problematic Windows %PATH% imported var\nsudo bash -c "echo 0 > /proc/sys/fs/binfmt_misc/status" # Disable WSL support for Win32 applications.\ncd depends\nmake HOST=x86_64-w64-mingw32\ncd ..\n./autogen.sh # not required when building from tarball\nCONFIG_SITE=$PWD/depends/x86_64-w64-mingw32/share/config.site ./configure --prefix=/ --disable-online-rust\nmake\nsudo bash -c "echo 1 > /proc/sys/fs/binfmt_misc/status" # Enable WSL support for Win32 applications.\n')),(0,s.kt)("h2",{id:"depends-system"},"Depends system"),(0,s.kt)("p",null,"For further documentation on the depends system see ",(0,s.kt)("a",{parentName:"p",href:"depends"},"depends")," in the depends directory."),(0,s.kt)("h2",{id:"installation"},"Installation"),(0,s.kt)("p",null,"After building using the Windows subsystem it can be useful to copy the compiled\nexecutables to a directory on the Windows drive in the same directory structure\nas they appear in the release ",(0,s.kt)("inlineCode",{parentName:"p"},".zip")," archive. This can be done in the following\nway. This will install to ",(0,s.kt)("inlineCode",{parentName:"p"},"c:\\workspace\\pcoin"),", for example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"make install DESTDIR=/mnt/c/workspace/pcoin\n")),(0,s.kt)("p",null,"You can also create an installer using:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"make deploy\n")),(0,s.kt)("h2",{id:"footnotes"},"Footnotes"),(0,s.kt)("a",{name:"footnote1"},"1"),": Starting from Ubuntu Xenial 16.04, both the 32 and 64 bit Mingw-w64 packages install two different compiler options to allow a choice between either posix or win32 threads. The default option is win32 threads which is the more efficient since it will result in binary code that links directly with the Windows kernel32.lib. Unfortunately, the headers required to support win32 threads conflict with some of the classes in the C++11 standard library, in particular std::mutex. It's not possible to build the Pcoin Core code using the win32 version of the Mingw-w64 cross compilers (at least not without modifying headers in the Pcoin Core source code).")}m.isMDXComponent=!0}}]);