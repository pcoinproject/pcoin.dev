"use strict";(self.webpackChunkpcoin_website=self.webpackChunkpcoin_website||[]).push([[733],{4137:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return g}});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=i.createContext({}),p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},d=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(t),g=a,m=d["".concat(l,".").concat(g)]||d[g]||c[g]||r;return t?i.createElement(m,o(o({ref:n},u),{},{components:t})):i.createElement(m,o({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=t[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4047:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var i=t(3117),a=t(102),r=(t(7294),t(4137)),o=["components"],s={title:"Release Process",sidebar_position:2},l=void 0,p={unversionedId:"Pcoin-Core/Development/release-process",id:"Pcoin-Core/Development/release-process",title:"Release Process",description:"Branch updates",source:"@site/docs/Pcoin-Core/Development/release-process.md",sourceDirName:"Pcoin-Core/Development",slug:"/Pcoin-Core/Development/release-process",permalink:"/pcoin.dev/docs/Pcoin-Core/Development/release-process",draft:!1,editUrl:"https://github.com/pcoinproject/pcoin.dev/edit/master/docs/Pcoin-Core/Development/release-process.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Release Process",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Developer Notes",permalink:"/pcoin.dev/docs/Pcoin-Core/Development/developer-notes"},next:{title:"Unauthenticated REST Interface",permalink:"/pcoin.dev/docs/Pcoin-Core/Development/REST-interface"}},u={},c=[{value:"Branch updates",id:"branch-updates",level:2},{value:"Before every release candidate",id:"before-every-release-candidate",level:3},{value:"Before every major and minor release",id:"before-every-major-and-minor-release",level:3},{value:"Before every major release",id:"before-every-major-release",level:3},{value:"After branch-off (on master)",id:"after-branch-off-on-master",level:4},{value:"After branch-off (on the major release branch)",id:"after-branch-off-on-the-major-release-branch",level:4},{value:"Before final release",id:"before-final-release",level:4},{value:"Building",id:"building",level:2},{value:"First time / New builders",id:"first-time--new-builders",level:3},{value:"PCOIN maintainers/release engineers, suggestion for writing release notes",id:"pcoin-maintainersrelease-engineers-suggestion-for-writing-release-notes",level:3},{value:"Setup and perform Gitian builds",id:"setup-and-perform-gitian-builds",level:3},{value:"Fetch and create inputs: (first time, or when dependency versions change)",id:"fetch-and-create-inputs-first-time-or-when-dependency-versions-change",level:3},{value:"Optional: Seed the Gitian sources cache and offline git repositories",id:"optional-seed-the-gitian-sources-cache-and-offline-git-repositories",level:3},{value:"Build and sign PCOIN Core for Linux, Windows, and macOS:",id:"build-and-sign-pcoin-core-for-linux-windows-and-macos",level:3},{value:"Verify other gitian builders signatures to your own. (Optional)",id:"verify-other-gitian-builders-signatures-to-your-own-optional",level:3},{value:"Next steps:",id:"next-steps",level:3},{value:"After 3 or more people have gitian-built and their results match:",id:"after-3-or-more-people-have-gitian-built-and-their-results-match",level:3}],d={toc:c};function g(e){var n=e.components,t=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"branch-updates"},"Branch updates"),(0,r.kt)("h3",{id:"before-every-release-candidate"},"Before every release candidate"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update manpages, see ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/pcoinproject/pcoin/blob/master/contrib/devtools/README.md#gen-manpagessh"},"gen-manpages.sh"),"."),(0,r.kt)("li",{parentName:"ul"},"Update release candidate version in ",(0,r.kt)("inlineCode",{parentName:"li"},"configure.ac")," (",(0,r.kt)("inlineCode",{parentName:"li"},"CLIENT_VERSION_RC"),")")),(0,r.kt)("h3",{id:"before-every-major-and-minor-release"},"Before every major and minor release"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update version in ",(0,r.kt)("inlineCode",{parentName:"li"},"configure.ac")," (don't forget to set ",(0,r.kt)("inlineCode",{parentName:"li"},"CLIENT_VERSION_IS_RELEASE")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),") (don't forget to set ",(0,r.kt)("inlineCode",{parentName:"li"},"CLIENT_VERSION_RC")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"0"),")"),(0,r.kt)("li",{parentName:"ul"},"Write release notes (see below)")),(0,r.kt)("h3",{id:"before-every-major-release"},"Before every major release"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update hardcoded ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/pcoinproject/pcoin/blob/master/contrib/seeds/README.md"},"seeds"),", see ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/bitcoin/bitcoin/pull/7415"},"this pull request")," for an example."),(0,r.kt)("li",{parentName:"ul"},"Update ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/pcoinproject/pcoin/blob/master/src/qt/intro.cpp"},(0,r.kt)("inlineCode",{parentName:"a"},"BLOCK_CHAIN_SIZE")," and ",(0,r.kt)("inlineCode",{parentName:"a"},"TESTNET_BLOCK_CHAIN_SIZE"))," to the current size plus some overhead for each respective network."),(0,r.kt)("li",{parentName:"ul"},"Update ",(0,r.kt)("inlineCode",{parentName:"li"},"src/chainparams.cpp")," with statistics about the transaction count and rate."),(0,r.kt)("li",{parentName:"ul"},"On both the master branch and the new release branch:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"update ",(0,r.kt)("inlineCode",{parentName:"li"},"CLIENT_VERSION_MINOR")," in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/pcoinproject/pcoin/blob/master/configure.ac"},(0,r.kt)("inlineCode",{parentName:"a"},"configure.ac"))))),(0,r.kt)("li",{parentName:"ul"},"On the new release branch in ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/pcoinproject/pcoin/blob/master/configure.ac"},(0,r.kt)("inlineCode",{parentName:"a"},"configure.ac")),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"set ",(0,r.kt)("inlineCode",{parentName:"li"},"CLIENT_VERSION_REVISION")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"0")),(0,r.kt)("li",{parentName:"ul"},"set ",(0,r.kt)("inlineCode",{parentName:"li"},"CLIENT_VERSION_IS_RELEASE")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"))))),(0,r.kt)("h4",{id:"after-branch-off-on-master"},"After branch-off (on master)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update the version of ",(0,r.kt)("inlineCode",{parentName:"li"},"contrib/gitian-descriptors/*.yml"),".")),(0,r.kt)("h4",{id:"after-branch-off-on-the-major-release-branch"},"After branch-off (on the major release branch)"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Update the versions and the link to the release notes draft in ",(0,r.kt)("inlineCode",{parentName:"li"},"doc/release-notes.md"),".")),(0,r.kt)("h4",{id:"before-final-release"},"Before final release"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Merge the release notes into the branch."),(0,r.kt)("li",{parentName:"ul"},'Ensure the "Needs release note" label is removed from all relevant pull requests and issues.')),(0,r.kt)("h2",{id:"building"},"Building"),(0,r.kt)("h3",{id:"first-time--new-builders"},"First time / New builders"),(0,r.kt)("p",null,"If you're using the automated script (found in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/pcoin/blob/master/contrib/gitian-build.py"},"contrib/gitian-build.py"),'), then at this point you should run it with the "--setup" command. Otherwise ignore this.'),(0,r.kt)("p",null,"Check out the source code in the following directory hierarchy."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cd /path/to/your/toplevel/build\ngit clone https://github.com/pcoinproject/gitian.sigs.git\ngit clone https://github.com/pcoinproject/pcoin-detached-sigs.git\ngit clone https://github.com/devrandom/gitian-builder.git\ngit clone https://github.com/pcoinproject/pcoin.git\n")),(0,r.kt)("h3",{id:"pcoin-maintainersrelease-engineers-suggestion-for-writing-release-notes"},"PCOIN maintainers/release engineers, suggestion for writing release notes"),(0,r.kt)("p",null,"Write release notes. git shortlog helps a lot, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"git shortlog --no-merges v(current version, e.g. 0.7.2)..v(new version, e.g. 0.8.0)\n")),(0,r.kt)("p",null,"Generate list of authors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"git log --format='- %aN' v(current version, e.g. 3.2.2)..v(new version, e.g. 3.2.3) | sort -fiu\n")),(0,r.kt)("p",null,"Tag the version (or release candidate) in git:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"    git tag -s v(new version, e.g. 0.8.0)\n")),(0,r.kt)("h3",{id:"setup-and-perform-gitian-builds"},"Setup and perform Gitian builds"),(0,r.kt)("p",null,"If you're using the automated script (found in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/pcoin/blob/master/contrib/gitian-build.py"},"contrib/gitian-build.py"),'), then at this point you should run it with the "--build" command. Otherwise ignore this.'),(0,r.kt)("p",null,"Setup Gitian descriptors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pushd ./pcoin\nexport SIGNER=(your Gitian key, ie bluematt, sipa, etc)\nexport VERSION=(new version, e.g. 0.8.0)\ngit fetch\ngit checkout v${VERSION}\npopd\n")),(0,r.kt)("p",null,"Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other Gitian signatures."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pushd ./gitian.sigs\ngit pull\npopd\n")),(0,r.kt)("p",null,"Ensure gitian-builder is up-to-date:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pushd ./gitian-builder\ngit pull\npopd\n")),(0,r.kt)("h3",{id:"fetch-and-create-inputs-first-time-or-when-dependency-versions-change"},"Fetch and create inputs: (first time, or when dependency versions change)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pushd ./gitian-builder\nmkdir -p inputs\nwget -O osslsigncode-2.0.tar.gz -P inputs https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz\necho '5a60e0a4b3e0b4d655317b2f12a810211c50242138322b16e7e01c6fbb89d92f inputs/osslsigncode-2.0.tar.gz' | sha256sum -c\npopd\n")),(0,r.kt)("p",null,"Create the macOS SDK tarball, see the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pcoinproject/pcoin/blob/master/contrib/macdeploy/README.md"},"macdeploy instructions")," for details, and copy it into the inputs directory."),(0,r.kt)("h3",{id:"optional-seed-the-gitian-sources-cache-and-offline-git-repositories"},"Optional: Seed the Gitian sources cache and offline git repositories"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Gitian is sometimes unable to download files. If you have errors, try the step below.")),(0,r.kt)("p",null,"By default, Gitian will fetch source files as needed. To cache them ahead of time, make sure you have checked out the tag you want to build in pcoin, then:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pushd ./gitian-builder\nmake -C ../pcoin/depends download SOURCES_PATH=`pwd`/cache/common\npopd\n")),(0,r.kt)("p",null,"Only missing files will be fetched, so this is safe to re-run for each build."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Offline builds must use the --url flag to ensure Gitian fetches only from local URLs. For example:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pushd ./gitian-builder\n./bin/gbuild --url pcoin=/path/to/pcoin,signature=/path/to/sigs {rest of arguments}\npopd\n")),(0,r.kt)("p",{parentName:"admonition"},"The gbuild invocations below ",(0,r.kt)("b",null,"DO NOT DO THIS")," by default.")),(0,r.kt)("h3",{id:"build-and-sign-pcoin-core-for-linux-windows-and-macos"},"Build and sign PCOIN Core for Linux, Windows, and macOS:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'pushd ./gitian-builder\n./bin/gbuild --num-make 2 --memory 3000 --commit pcoin=v${VERSION} ../pcoin/contrib/gitian-descriptors/gitian-linux.yml\n./bin/gsign --signer "$SIGNER" --release ${VERSION}-linux --destination ../gitian.sigs/ ../pcoin/contrib/gitian-descriptors/gitian-linux.yml\nmv build/out/pcoin-*.tar.gz build/out/src/pcoin-*.tar.gz ../\n\n./bin/gbuild --num-make 2 --memory 3000 --commit pcoin=v${VERSION} ../pcoin/contrib/gitian-descriptors/gitian-win.yml\n./bin/gsign --signer "$SIGNER" --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../pcoin/contrib/gitian-descriptors/gitian-win.yml\nmv build/out/pcoin-*-win-unsigned.tar.gz inputs/pcoin-win-unsigned.tar.gz\nmv build/out/pcoin-*.zip build/out/pcoin-*.exe ../\n\n./bin/gbuild --num-make 2 --memory 3000 --commit pcoin=v${VERSION} ../pcoin/contrib/gitian-descriptors/gitian-osx.yml\n./bin/gsign --signer "$SIGNER" --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../pcoin/contrib/gitian-descriptors/gitian-osx.yml\nmv build/out/pcoin-*-osx-unsigned.tar.gz inputs/pcoin-osx-unsigned.tar.gz\nmv build/out/pcoin-*.tar.gz build/out/pcoin-*.dmg ../\npopd\n')),(0,r.kt)("p",null,"Build output expected:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"source tarball (",(0,r.kt)("inlineCode",{parentName:"li"},"pcoin-${VERSION}.tar.gz"),")"),(0,r.kt)("li",{parentName:"ol"},"linux 32-bit and 64-bit dist tarballs (",(0,r.kt)("inlineCode",{parentName:"li"},"pcoin-${VERSION}-linux[32|64].tar.gz"),")"),(0,r.kt)("li",{parentName:"ol"},"windows 32-bit and 64-bit unsigned installers and dist zips (",(0,r.kt)("inlineCode",{parentName:"li"},"pcoin-${VERSION}-win[32|64]-setup-unsigned.exe"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"pcoin-${VERSION}-win[32|64].zip"),")"),(0,r.kt)("li",{parentName:"ol"},"macOS unsigned installer and dist tarball (",(0,r.kt)("inlineCode",{parentName:"li"},"pcoin-${VERSION}-osx-unsigned.dmg"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"pcoin-${VERSION}-osx64.tar.gz"),")"),(0,r.kt)("li",{parentName:"ol"},"Gitian signatures (in ",(0,r.kt)("inlineCode",{parentName:"li"},"gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your Gitian key)/"),")")),(0,r.kt)("h3",{id:"verify-other-gitian-builders-signatures-to-your-own-optional"},"Verify other gitian builders signatures to your own. (Optional)"),(0,r.kt)("p",null,"Add other gitian builders keys to your gpg keyring, and/or refresh keys."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"gpg --import pcoin/contrib/gitian-keys/*.pgp\ngpg --refresh-keys\n")),(0,r.kt)("p",null,"Verify the signatures"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pushd ./gitian-builder\n./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../pcoin/contrib/gitian-descriptors/gitian-linux.yml\n./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../pcoin/contrib/gitian-descriptors/gitian-win.yml\n./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../pcoin/contrib/gitian-descriptors/gitian-osx.yml\npopd\n")),(0,r.kt)("h3",{id:"next-steps"},"Next steps:"),(0,r.kt)("p",null,"Commit your signature to gitian.sigs:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'pushd gitian.sigs\ngit add ${VERSION}-linux/"${SIGNER}"\ngit add ${VERSION}-win-unsigned/"${SIGNER}"\ngit add ${VERSION}-osx-unsigned/"${SIGNER}"\ngit commit -m "Add ${VERSION} unsigned sigs for ${SIGNER}"\ngit push  # Assuming you can push to the gitian.sigs tree\npopd\n')),(0,r.kt)("p",null,"Codesigner only: Create Windows/macOS detached signatures:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Only one person handles codesigning. Everyone else should skip to the next step."),(0,r.kt)("li",{parentName:"ul"},"Only once the Windows/macOS builds each have 3 matching signatures may they be signed with their respective release keys.")),(0,r.kt)("p",null,"Codesigner only: Sign the macOS binary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'    transfer pcoin-osx-unsigned.tar.gz to macOS for signing\n    tar xf pcoin-osx-unsigned.tar.gz\n    ./detached-sig-create.sh -s "Key ID"\n    Enter the keychain password and authorize the signature\n    Move signature-osx.tar.gz back to the gitian host\n')),(0,r.kt)("p",null,"Codesigner only: Sign the windows binaries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    tar xf pcoin-win-unsigned.tar.gz\n    ./detached-sig-create.sh -key /path/to/codesign.key\n    Enter the passphrase for the key when prompted\n    signature-win.tar.gz will be created\n")),(0,r.kt)("p",null,"Codesigner only: Commit the detached codesign payloads:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'cd ~/pcoin-detached-sigs\ncheckout the appropriate branch for this release series\nrm -rf *\ntar xf signature-osx.tar.gz\ntar xf signature-win.tar.gz\ngit add -a\ngit commit -m "point to ${VERSION}"\ngit tag -s v${VERSION} HEAD\ngit push the current branch and new tag\n')),(0,r.kt)("p",null,"Non-codesigners: wait for Windows/macOS detached signatures:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys."),(0,r.kt)("li",{parentName:"ul"},"Detached signatures will then be committed to the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/pcoinproject/pcoin-detached-sigs"},"pcoin-detached-sigs")," repository, which can be combined with the unsigned apps to create signed binaries.")),(0,r.kt)("p",null,"Create (and optionally verify) the signed macOS binary:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'pushd ./gitian-builder\n./bin/gbuild -i --commit signature=v${VERSION} ../pcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n./bin/gsign --signer "$SIGNER" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../pcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../pcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\nmv build/out/pcoin-osx-signed.dmg ../pcoin-${VERSION}-osx.dmg\npopd\n')),(0,r.kt)("p",null,"Create (and optionally verify) the signed Windows binaries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'pushd ./gitian-builder\n./bin/gbuild -i --commit signature=v${VERSION} ../pcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n./bin/gsign --signer "$SIGNER" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../pcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../pcoin/contrib/gitian-descriptors/gitian-win-signer.yml\nmv build/out/pcoin-*win64-setup.exe ../pcoin-${VERSION}-win64-setup.exe\npopd\n')),(0,r.kt)("p",null,"Commit your signature for the signed macOS/Windows binaries:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'pushd gitian.sigs\ngit add ${VERSION}-osx-signed/"${SIGNER}"\ngit add ${VERSION}-win-signed/"${SIGNER}"\ngit commit -m "Add ${SIGNER} ${VERSION} signed binaries signatures"\ngit push  # Assuming you can push to the gitian.sigs tree\npopd\n')),(0,r.kt)("h3",{id:"after-3-or-more-people-have-gitian-built-and-their-results-match"},"After 3 or more people have gitian-built and their results match:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create ",(0,r.kt)("inlineCode",{parentName:"li"},"SHA256SUMS.asc")," for the builds, and GPG-sign it:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sha256sum * > SHA256SUMS\n")),(0,r.kt)("p",null,"The list of files should be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pcoin-${VERSION}-aarch64-linux-gnu.tar.gz\npcoin-${VERSION}-arm-linux-gnueabihf.tar.gz\npcoin-${VERSION}-i686-pc-linux-gnu.tar.gz\npcoin-${VERSION}-riscv64-linux-gnu.tar.gz\npcoin-${VERSION}-x86_64-linux-gnu.tar.gz\npcoin-${VERSION}-osx64.tar.gz\npcoin-${VERSION}-osx.dmg\npcoin-${VERSION}.tar.gz\npcoin-${VERSION}-win64-setup.exe\npcoin-${VERSION}-win64.zip\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"*-debug*")," files generated by the gitian build contain debug symbols\nfor troubleshooting by developers. It is assumed that anyone that is interested\nin debugging can run gitian to generate the files for themselves. To avoid\nend-user confusion about which file to pick, as well as save storage\nspace ",(0,r.kt)("em",{parentName:"p"},"do not upload these to github"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GPG-sign it, delete the unsigned file:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\nrm SHA256SUMS\n")),(0,r.kt)("p",null,"(the digest algorithm is forced to sha256 to avoid confusion of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Hash:")," header that GPG adds with the SHA256 used for the files)\nNote: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Upload zips and installers, as well as ",(0,r.kt)("inlineCode",{parentName:"p"},"SHA256SUMS.asc")," from last step, to the GitHub release (see below)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Announce the release:"))))}g.isMDXComponent=!0}}]);