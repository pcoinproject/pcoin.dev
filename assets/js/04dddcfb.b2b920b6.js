"use strict";(self.webpackChunkpcoin_website=self.webpackChunkpcoin_website||[]).push([[250],{4137:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(t),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return t?r.createElement(m,l(l({ref:n},c),{},{components:t})):r.createElement(m,l({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5343:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return p}});var r=t(7462),a=t(3366),i=(t(7294),t(4137)),l=["components"],o={title:"Fuzzing PCOIN Core using libFuzzer",sidebar_position:2},s=void 0,u={unversionedId:"Pcoin-Core/Miscellaneous/fuzzing",id:"Pcoin-Core/Miscellaneous/fuzzing",title:"Fuzzing PCOIN Core using libFuzzer",description:"A special test harness in src/test/fuzz/ is provided for each fuzz target to",source:"@site/docs/Pcoin-Core/Miscellaneous/fuzzing.md",sourceDirName:"Pcoin-Core/Miscellaneous",slug:"/Pcoin-Core/Miscellaneous/fuzzing",permalink:"/pcoin.dev/docs/Pcoin-Core/Miscellaneous/fuzzing",draft:!1,editUrl:"https://github.com/pcoinproject/pcoin.dev/edit/master/docs/Pcoin-Core/Miscellaneous/fuzzing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Fuzzing PCOIN Core using libFuzzer",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"PCOIN Core file system",permalink:"/pcoin.dev/docs/Pcoin-Core/Miscellaneous/files"},next:{title:"Reduce Memory",permalink:"/pcoin.dev/docs/Pcoin-Core/Miscellaneous/reduce-memory"}},c={},p=[{value:"Preparing fuzzing",id:"preparing-fuzzing",level:2},{value:"AFL",id:"afl",level:2},{value:"Building AFL",id:"building-afl",level:3},{value:"Instrumentation",id:"instrumentation",level:3},{value:"Fuzzing",id:"fuzzing",level:3},{value:"libFuzzer",id:"libfuzzer",level:2},{value:"macOS hints for libFuzzer",id:"macos-hints-for-libfuzzer",level:3}],d={toc:p};function f(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A special test harness in ",(0,i.kt)("inlineCode",{parentName:"p"},"src/test/fuzz/")," is provided for each fuzz target to\nprovide an easy entry point for fuzzers and the like. In this document we'll\ndescribe how to use it with AFL and libFuzzer."),(0,i.kt)("h2",{id:"preparing-fuzzing"},"Preparing fuzzing"),(0,i.kt)("p",null,"The fuzzer needs some inputs to work on, but the inputs or seeds can be used\ninterchangeably between libFuzzer and AFL."),(0,i.kt)("p",null,"Extract the example seeds (or other starting inputs) into the inputs\ndirectory before starting fuzzing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"git clone https://github.com/bitcoin-core/qa-assets\nexport DIR_FUZZ_IN=$PWD/qa-assets/fuzz_seed_corpus\n")),(0,i.kt)("p",null,"AFL needs an input directory with examples, and an output directory where it\nwill place examples that it found. These can be anywhere in the file system,\nwe'll define environment variables to make it easy to reference them."),(0,i.kt)("p",null,"So, only for AFL you need to configure the outputs path:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mkdir outputs\nexport AFLOUT=$PWD/outputs\n")),(0,i.kt)("p",null,"libFuzzer will use the input directory as output directory."),(0,i.kt)("h2",{id:"afl"},"AFL"),(0,i.kt)("h3",{id:"building-afl"},"Building AFL"),(0,i.kt)("p",null,"It is recommended to always use the latest version of afl:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"wget http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz\ntar -zxvf afl-latest.tgz\ncd afl-<version>\nmake\nexport AFLPATH=$PWD\n")),(0,i.kt)("p",null,"For macOS you may need to ignore x86 compilation checks when running ",(0,i.kt)("inlineCode",{parentName:"p"},"make"),":\n",(0,i.kt)("inlineCode",{parentName:"p"},"AFL_NO_X86=1 make"),"."),(0,i.kt)("h3",{id:"instrumentation"},"Instrumentation"),(0,i.kt)("p",null,"To build PCOIN Core using AFL instrumentation (this assumes that the\n",(0,i.kt)("inlineCode",{parentName:"p"},"AFLPATH")," was set as above):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./configure --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-gcc CXX=${AFLPATH}/afl-g++\nexport AFL_HARDEN=1\nmake\n")),(0,i.kt)("p",null,"If you are using clang you will need to substitute ",(0,i.kt)("inlineCode",{parentName:"p"},"afl-gcc")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"afl-clang"),"\nand ",(0,i.kt)("inlineCode",{parentName:"p"},"afl-g++")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"afl-clang++"),", so the first line above becomes:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./configure --disable-shared --enable-tests --enable-fuzz CC=${AFLPATH}/afl-clang CXX=${AFLPATH}/afl-clang++\n")),(0,i.kt)("p",null,"We disable ccache because we don't want to pollute the ccache with instrumented\nobjects, and similarly don't want to use non-instrumented cached objects linked\nin."),(0,i.kt)("p",null,"The fuzzing can be sped up significantly (~200x) by using ",(0,i.kt)("inlineCode",{parentName:"p"},"afl-clang-fast")," and\n",(0,i.kt)("inlineCode",{parentName:"p"},"afl-clang-fast++")," in place of ",(0,i.kt)("inlineCode",{parentName:"p"},"afl-gcc")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"afl-g++")," when compiling. When\ncompiling using ",(0,i.kt)("inlineCode",{parentName:"p"},"afl-clang-fast"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"afl-clang-fast++"),' the resulting\nbinary will be instrumented in such a way that the AFL\nfeatures "persistent mode" and "deferred forkserver" can be used. See\n',(0,i.kt)("a",{parentName:"p",href:"https://github.com/google/AFL/tree/master/llvm_mode"},"https://github.com/google/AFL/tree/master/llvm_mode")," for details."),(0,i.kt)("h3",{id:"fuzzing"},"Fuzzing"),(0,i.kt)("p",null,"To start the actual fuzzing use:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"export FUZZ_TARGET=bech32  # Pick a fuzz_target\nmkdir ${AFLOUT}/${FUZZ_TARGET}\n$AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- src/test/fuzz/${FUZZ_TARGET}\n")),(0,i.kt)("p",null,"You may have to change a few kernel parameters to test optimally - ",(0,i.kt)("inlineCode",{parentName:"p"},"afl-fuzz"),"\nwill print an error and suggestion if so."),(0,i.kt)("p",null,"On macOS you may need to set ",(0,i.kt)("inlineCode",{parentName:"p"},"AFL_NO_FORKSRV=1")," to get the target to run."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"export FUZZ_TARGET=bech32  # Pick a fuzz_target\nmkdir ${AFLOUT}/${FUZZ_TARGET}\nAFL_NO_FORKSRV=1 $AFLPATH/afl-fuzz -i ${DIR_FUZZ_IN}/${FUZZ_TARGET} -o ${AFLOUT}/${FUZZ_TARGET} -m52 -- src/test/fuzz/${FUZZ_TARGET}\n")),(0,i.kt)("h2",{id:"libfuzzer"},"libFuzzer"),(0,i.kt)("p",null,"A recent version of ",(0,i.kt)("inlineCode",{parentName:"p"},"clang"),", the address sanitizer and libFuzzer is needed (all\nfound in the ",(0,i.kt)("inlineCode",{parentName:"p"},"compiler-rt")," runtime libraries package)."),(0,i.kt)("p",null,"To build all fuzz targets with libFuzzer, run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./configure --enable-fuzz --with-sanitizers=fuzzer,address CC=clang CXX=clang++\nmake\n")),(0,i.kt)("p",null,"See ",(0,i.kt)("a",{parentName:"p",href:"https://llvm.org/docs/LibFuzzer.html#running"},"https://llvm.org/docs/LibFuzzer.html#running")," on how to run the libFuzzer\ninstrumented executable."),(0,i.kt)("p",null,"Alternatively, you can run the script through the fuzzing test harness (only\nlibFuzzer supported so far). You need to pass it the inputs directory and\nthe specific test target you want to run."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./test/fuzz/test_runner.py ${DIR_FUZZ_IN} bech32\n")),(0,i.kt)("h3",{id:"macos-hints-for-libfuzzer"},"macOS hints for libFuzzer"),(0,i.kt)("p",null,"The default clang/llvm version supplied by Apple on macOS does not include\nfuzzing libraries, so macOS users will need to install a full version, for\nexample using ",(0,i.kt)("inlineCode",{parentName:"p"},"brew install llvm"),"."),(0,i.kt)("p",null,"Should you run into problems with the address sanitizer, it is possible you\nmay need to run ",(0,i.kt)("inlineCode",{parentName:"p"},"./configure")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"--disable-asm")," to avoid errors\nwith certain assembly code from PCOIN Core's code. See ",(0,i.kt)("a",{parentName:"p",href:"/pcoin.dev/docs/Pcoin-Core/Development/developer-notes#sanitizers"},"developer notes on sanitizers"),"\nfor more information."),(0,i.kt)("p",null,"You may also need to take care of giving the correct path for clang and\nclang++, like ",(0,i.kt)("inlineCode",{parentName:"p"},"CC=/path/to/clang CXX=/path/to/clang++")," if the non-systems\nclang does not come first in your path."),(0,i.kt)("p",null,"Full configure that was tested on macOS Catalina with ",(0,i.kt)("inlineCode",{parentName:"p"},"brew")," installed ",(0,i.kt)("inlineCode",{parentName:"p"},"llvm"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"./configure --enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=/usr/local/opt/llvm/bin/clang CXX=/usr/local/opt/llvm/bin/clang++ --disable-asm\n")))}f.isMDXComponent=!0}}]);